import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b81f03d3.js";const F=JSON.parse('{"title":"📝 Plug-in Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/dev/basic.md","filePath":"en/dev/basic.md","lastUpdated":1699863091000}'),p={name:"en/dev/basic.md"},o=l(`<h1 id="📝-plug-in-development-guide" tabindex="-1">📝 Plug-in Development Guide <a class="header-anchor" href="#📝-plug-in-development-guide" aria-label="Permalink to &quot;📝 Plug-in Development Guide&quot;">​</a></h1><p>The sample plug-in library used in this article: <a href="https://github.com/LlmKira/llmbot_plugin_bilisearch" target="_blank" rel="noreferrer">https://github.com/LlmKira/llmbot_plugin_bilisearch</a></p><p>OpenaiBot provides an OPENAPI interface registration system for third-party plug-ins. This article will introduce how to build a plug-in.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because the plug-in mechanism is implemented with reference to <code>Nonebot</code>, plug-in development is similar to NoneBot Plugin.</p></div><h2 id="📌-structural-specification" tabindex="-1">📌 Structural specification <a class="header-anchor" href="#📌-structural-specification" aria-label="Permalink to &quot;📌 Structural specification&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Infrastructure example</span></span>
<span class="line"><span style="color:#e1e4e8;">├── LICENSE</span></span>
<span class="line"><span style="color:#e1e4e8;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#e1e4e8;">│ └─ __init__.py</span></span>
<span class="line"><span style="color:#e1e4e8;">├── poetry.lock</span></span>
<span class="line"><span style="color:#e1e4e8;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#e1e4e8;">└── README.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Infrastructure example</span></span>
<span class="line"><span style="color:#24292e;">├── LICENSE</span></span>
<span class="line"><span style="color:#24292e;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#24292e;">│ └─ __init__.py</span></span>
<span class="line"><span style="color:#24292e;">├── poetry.lock</span></span>
<span class="line"><span style="color:#24292e;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#24292e;">└── README.md</span></span></code></pre></div><p><code>README.md</code> is the project description file.</p><p><code>pyproject.toml</code> It is the package information file of the project, including the package name, dependencies, author, homepage and other configurations. See <a href="https://python-poetry.org/docs/pyproject/" target="_blank" rel="noreferrer">detailed options</a>.</p><p><code>poetry.lock</code> It is a project dependency lock file that locks the warehouse dependency version so that all collaborators use the same version of dependency. This file needs to be updated using the <code>poetry lock</code> command when updating dependent versions.</p><p><code>llmbot_plugin_bilisearch</code> is the main body of the plug-in in the example, and contains the real execution file and resources of the plug-in.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because pypi does not allow uploading large files, the plug-in packaging folder should not upload large resource files.</p></div><p><code>LICENSE</code> is the open source agreement file of the project and has certain legal effect. To select a protocol, please refer to <a href="https://www.zhihu.com/question/19568896" target="_blank" rel="noreferrer">Zhihu Question</a>.</p><h3 id="🔗-import-verification" tabindex="-1">🔗 Import verification <a class="header-anchor" href="#🔗-import-verification" aria-label="Permalink to &quot;🔗 Import verification&quot;">​</a></h3><p>First make sure you have installed a code editor and Python environment (version greater than 3.9). In the Shell console or CMD command line, enter <code>python -v</code> to check or view the version.</p><h4 id="download-the-required-tools" tabindex="-1">Download the required tools <a class="header-anchor" href="#download-the-required-tools" aria-label="Permalink to &quot;Download the required tools&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">llmkira</span></span>
<span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">llmkira</span></span>
<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span></span></code></pre></div><p><code>llmkira</code> It is a packaged collection of robot main files, and the plug-in needs to import the classes in it for use. There is an imported <a href="https://github.com/LlmKira/llmbot_plugin_bilisearch/blob/main/llmbot_plugin_bilisearch/__init__.py" target="_blank" rel="noreferrer">example</a>.</p><p><code>poetry</code> is a widely used dependency management and packaging tool. <a href="https://python-poetry.org/docs/basic-usage/" target="_blank" rel="noreferrer">Introduction to basic commands</a>.</p><div class="info custom-block"><p class="custom-block-title">Common commands</p><ul><li><code>poetry init</code> creates a <code>pyproject.toml</code> file</li><li><code>poetry lock</code> updates dependent locks</li><li><code>poetry add &lt;name&gt;</code> Add dependencies</li><li><code>poetry install</code> installs the current library into the local environment</li><li><code>poetry build</code> build library</li><li><code>poetry publish</code> publishing library</li></ul></div><p>Create a new project on Github and pull it locally.</p><p>Use a code editor to open the local project folder, then create the plug-in folder, open a Shell at the current project location and enter <code>poetry init</code> to establish the basic package structure.</p><p>Complete the <code>pyproject.toml</code> file by entering the required information.</p><p>Use the <code>poetry add &lt;some&gt;</code> command or edit the configuration file to add dependencies.</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">python = </span><span style="color:#9ECBFF;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili-api-python = </span><span style="color:#9ECBFF;">&quot;^16.1.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#24292E;">bilibili-api-python = </span><span style="color:#032F62;">&quot;^16.1.0&quot;</span></span></code></pre></div><p>At this point, the basic structure of the project has been established.</p><h2 id="📦-development-process" tabindex="-1">📦 Development process <a class="header-anchor" href="#📦-development-process" aria-label="Permalink to &quot;📦 Development process&quot;">​</a></h2><p>The plug-in is internally composed of function classes, tool classes, meta information, functional functions, and parameter verification classes.</p><p>The plug-in name within the function must be referenced by the <code>__plugin_name__</code> parameter.</p><h3 id="🔧-how-to-test-in-real-time" tabindex="-1">🔧 How to test in real time <a class="header-anchor" href="#🔧-how-to-test-in-real-time" aria-label="Permalink to &quot;🔧 How to test in real time&quot;">​</a></h3><p>You can put the plug-in into <code>Openaibot/llmkira/extra/plugins</code> under the project to mount the test locally.</p><p>Or use poetry to install the mount locally.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">your_plugin_path</span></span>
<span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">your_plugin_path</span></span>
<span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><h3 id="🪣-add-variables-and-verification" tabindex="-1">🪣 Add variables and verification <a class="header-anchor" href="#🪣-add-variables-and-verification" aria-label="Permalink to &quot;🪣 Add variables and verification&quot;">​</a></h3><p><strong>The following code must be placed at the beginning for architecture version verification.</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__package_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__openapi_version__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># refer https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/__init__.py#L27</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.func_calling </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">verify_openapi_version(__package_name__, __openapi_version__)  </span><span style="color:#6A737D;"># Verify </span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">__package_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#24292E;">__openapi_version__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># refer https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/__init__.py#L27</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.func_calling </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">verify_openapi_version(__package_name__, __openapi_version__)  </span><span style="color:#6A737D;"># Verify </span></span></code></pre></div><h3 id="⚙️-define-function-class" tabindex="-1">⚙️ Define function class <a class="header-anchor" href="#⚙️-define-function-class" aria-label="Permalink to &quot;⚙️ Define function class&quot;">​</a></h3><h4 id="🧩-create-from-pydanitc" tabindex="-1">🧩 Create from pydanitc <a class="header-anchor" href="#🧩-create-from-pydanitc" aria-label="Permalink to &quot;🧩 Create from pydanitc&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.schema </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Function</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel, ConfigDict, field_validator, Field</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;some_function&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># function verification class</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Alarm</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    Set a timed reminder (only for minutes)</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    delay: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;The delay time, in minutes&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    content: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;reminder content&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    model_config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigDict(</span><span style="color:#FFAB70;">extra</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;allow&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@field_validator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delay&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay_validator</span><span style="color:#E1E4E8;">(cls, v):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delay must be greater than 0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function.parse_from_pydantic(</span><span style="color:#FFAB70;">schema_model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Alarm, </span><span style="color:#FFAB70;">plugin_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Function(name=&#39;Alarm&#39;, description=&#39;Set a timed reminder (only for minutes)&#39;, parameters=Parameters(type=&#39;object&#39;, properties={&#39;delay&#39;: {&#39;description&#39;: &#39;The delay time, in minutes&#39;, &#39;title&#39;: &#39;Delay&#39;, &#39;type&#39;: &#39;integer&#39;}, &#39;content&#39;: {&#39;description&#39;: &#39;reminder content&#39;, &#39;title&#39;: &#39;Content&#39;, &#39;type&#39;: &#39;string&#39;}}, required=[&#39;content&#39;, &#39;delay&#39;]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.schema </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Function</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel, ConfigDict, field_validator, Field</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;some_function&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># function verification class</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Alarm</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Set a timed reminder (only for minutes)</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    delay: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;The delay time, in minutes&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    content: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;reminder content&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    model_config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigDict(</span><span style="color:#E36209;">extra</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;allow&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@field_validator</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delay&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay_validator</span><span style="color:#24292E;">(cls, v):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delay must be greater than 0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function.parse_from_pydantic(</span><span style="color:#E36209;">schema_model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Alarm, </span><span style="color:#E36209;">plugin_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Function(name=&#39;Alarm&#39;, description=&#39;Set a timed reminder (only for minutes)&#39;, parameters=Parameters(type=&#39;object&#39;, properties={&#39;delay&#39;: {&#39;description&#39;: &#39;The delay time, in minutes&#39;, &#39;title&#39;: &#39;Delay&#39;, &#39;type&#39;: &#39;integer&#39;}, &#39;content&#39;: {&#39;description&#39;: &#39;reminder content&#39;, &#39;title&#39;: &#39;Content&#39;, &#39;type&#39;: &#39;string&#39;}}, required=[&#39;content&#39;, &#39;delay&#39;]))</span></span></code></pre></div><h4 id="🧲-use-function-to-define-function-class" tabindex="-1">🧲 Use <code>Function</code> to define function class <a class="header-anchor" href="#🧲-use-function-to-define-function-class" aria-label="Permalink to &quot;🧲 Use \`Function\` to define function class&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.endpoint.openai </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">bilibili </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">).update_config(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Function.FunctionExtra(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">system_prompt</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;🔍Searching on google.com...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Keywords entered in the search box&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">required</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.endpoint.openai </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bilibili </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">).update_config(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">config</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Function.FunctionExtra(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">system_prompt</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;🔍Searching on google.com...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Keywords entered in the search box&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">required</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>The information here will be submitted to LLM for use, and you can use the <code>Prompt project</code> to improve them.</p><p>The <code>required</code> attribute is not necessarily valid.</p><h3 id="🩼-add-function-verification-class" tabindex="-1">🩼 Add function verification class <a class="header-anchor" href="#🩼-add-function-verification-class" aria-label="Permalink to &quot;🩼 Add function verification class&quot;">​</a></h3><p>In actual situations, even if your function defines the parameter required=True, the return may be None, so we need a parameter validation class to check the parameters.</p><p>With the help of <a href="https://pydantic-docs.helpmanual.io/" target="_blank" rel="noreferrer">pydantic</a>, we can easily implement parameter verification.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bili</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):  </span><span style="color:#6A737D;"># Parameters </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    keywords: </span><span style="color:#79B8FF;">str</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        extra </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;allow&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    _set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bili.parse_obj({</span><span style="color:#9ECBFF;">&quot;arg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">})  </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bili</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):  </span><span style="color:#6A737D;"># Parameters </span></span>
<span class="line has-focus"><span style="color:#24292E;">    keywords: </span><span style="color:#005CC5;">str</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Config</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">        extra </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;allow&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">    _set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bili.parse_obj({</span><span style="color:#032F62;">&quot;arg&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">})  </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>Please use pydantic for parameter verification in the <code>run</code> method of the tool class.</p><h3 id="⚓️-function-function" tabindex="-1">⚓️ Function function <a class="header-anchor" href="#⚓️-function-function" aria-label="Permalink to &quot;⚓️ Function function&quot;">​</a></h3><p>A function function is a function that implements a function. Write whatever you want.</p><p>This function is free to use, but the OPENAPI architecture later needs to match an error decorator to count errors.</p><p>Therefore, it is recommended to write a main function to facilitate subsequent upgrades.</p><h3 id="🍭-tools" tabindex="-1">🍭 Tools <a class="header-anchor" href="#🍭-tools" aria-label="Permalink to &quot;🍭 Tools&quot;">​</a></h3><p>All tool classes must inherit <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L14" target="_blank" rel="noreferrer">BaseTool</a>.</p><p>The schema is as follows(maybe not the latest version):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> abc </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> abstractmethod, </span><span style="color:#79B8FF;">ABC</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Optional, Type, Dict, Any, List, Union, Set, final, Literal</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel, Field, validator, root_validator</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseTool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ABC</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    Basic tool class, all tool classes should inherit this class</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    silent: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;whether to be silent&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    function: </span><span style="color:#9ECBFF;">&quot;Function&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Function&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    keywords: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    pattern: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;regular matching&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    require_auth: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Whether authorization is required&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeatable: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Whether it is reusable&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    deploy_child: Literal[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;If it is 0, it ends at this chain point and will not be passed down&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    require_auth_kwargs: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    env_required: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Environment variable requirements&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_match_required: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;re.compile file name regular&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># exp: re.compile(r&quot;file_id=([a-z0-9]{8})&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@final</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">property</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        Tool name</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.function.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@final</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@root_validator</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_check_conflict</span><span style="color:#E1E4E8;">(cls, values):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># env_required and silent</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> values[</span><span style="color:#9ECBFF;">&quot;silent&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> values[</span><span style="color:#9ECBFF;">&quot;env_required&quot;</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;silent and env_required can not be True at the same time&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> values</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@final</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@validator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">pre</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_check_keywords</span><span style="color:#E1E4E8;">(cls, v):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> v:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(i, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;keyword must be str, got </span><span style="color:#79B8FF;">{type</span><span style="color:#E1E4E8;">(i)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;keyword must be less than 20 characters, got </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(i)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;keyword must be more than 2 characters, got </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(i)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">env_help_docs</span><span style="color:#E1E4E8;">(self, empty_env: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]) -&gt; </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        Environment variables help documentation</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param empty_env: List of unconfigured environment variables</span></span>
<span class="line"><span style="color:#9ECBFF;">        :return: help documentation/warnings</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(empty_env, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@abstractmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pre_check</span><span style="color:#E1E4E8;">(self) -&gt; Union[</span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        Pre-check, return False if not qualified, return True if qualified</span></span>
<span class="line"><span style="color:#9ECBFF;">        Returns a string indicating unqualified status with a reason</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@abstractmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func_message</span><span style="color:#E1E4E8;">(self, message_text, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        If it is qualified, it returns message, otherwise it returns None, which means it will not be processed.</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.keywords:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> message_text:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.function</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># Regular matching</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pattern:</span></span>
<span class="line"><span style="color:#E1E4E8;">            match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pattern.match(message_text)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> match:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.function</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@abstractmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failed</span><span style="color:#E1E4E8;">(self,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     task: </span><span style="color:#9ECBFF;">&quot;TaskHeader&quot;</span><span style="color:#E1E4E8;">, receiver: </span><span style="color:#9ECBFF;">&quot;TaskHeader.Location&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     exception, env: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, pending_task: </span><span style="color:#9ECBFF;">&quot;TaskBatch&quot;</span><span style="color:#E1E4E8;">, refer_llm_result: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     ):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        Usually write-back message + notification message</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param task: task</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param exception: exception</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@abstractmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(self,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       task: </span><span style="color:#9ECBFF;">&quot;TaskHeader&quot;</span><span style="color:#E1E4E8;">, receiver: </span><span style="color:#9ECBFF;">&quot;TaskHeader.Location&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       env: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, pending_task: </span><span style="color:#9ECBFF;">&quot;TaskBatch&quot;</span><span style="color:#E1E4E8;">, refer_llm_result: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">                       ):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        This function will be called if the operation is successful</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param task: task</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@abstractmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  task: </span><span style="color:#9ECBFF;">&quot;TaskHeader&quot;</span><span style="color:#E1E4E8;">, receiver: </span><span style="color:#9ECBFF;">&quot;TaskHeader.Location&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, env: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, pending_task: </span><span style="color:#9ECBFF;">&quot;TaskBatch&quot;</span><span style="color:#E1E4E8;">, refer_llm_result: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  ):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        Process the function and return the writeback result</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param task: task</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> abc </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> abstractmethod, </span><span style="color:#005CC5;">ABC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Optional, Type, Dict, Any, List, Union, Set, final, Literal</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel, Field, validator, root_validator</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseTool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ABC</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Basic tool class, all tool classes should inherit this class</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    silent: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;whether to be silent&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    function: </span><span style="color:#032F62;">&quot;Function&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Function&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    keywords: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    pattern: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;regular matching&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    require_auth: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Whether authorization is required&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    repeatable: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Whether it is reusable&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    deploy_child: Literal[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                        </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;If it is 0, it ends at this chain point and will not be passed down&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    require_auth_kwargs: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    env_required: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Environment variable requirements&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    file_match_required: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;re.compile file name regular&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># exp: re.compile(r&quot;file_id=([a-z0-9]{8})&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@final</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">property</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Tool name</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.function.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@final</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@root_validator</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_check_conflict</span><span style="color:#24292E;">(cls, values):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># env_required and silent</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> values[</span><span style="color:#032F62;">&quot;silent&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> values[</span><span style="color:#032F62;">&quot;env_required&quot;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;silent and env_required can not be True at the same time&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> values</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@final</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@validator</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pre</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_check_keywords</span><span style="color:#24292E;">(cls, v):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> v:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(i, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;keyword must be str, got </span><span style="color:#005CC5;">{type</span><span style="color:#24292E;">(i)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;keyword must be less than 20 characters, got </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(i)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;keyword must be more than 2 characters, got </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(i)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">env_help_docs</span><span style="color:#24292E;">(self, empty_env: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]) -&gt; </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Environment variables help documentation</span></span>
<span class="line"><span style="color:#032F62;">        :param empty_env: List of unconfigured environment variables</span></span>
<span class="line"><span style="color:#032F62;">        :return: help documentation/warnings</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(empty_env, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@abstractmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pre_check</span><span style="color:#24292E;">(self) -&gt; Union[</span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Pre-check, return False if not qualified, return True if qualified</span></span>
<span class="line"><span style="color:#032F62;">        Returns a string indicating unqualified status with a reason</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@abstractmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func_message</span><span style="color:#24292E;">(self, message_text, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        If it is qualified, it returns message, otherwise it returns None, which means it will not be processed.</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.keywords:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> message_text:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.function</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Regular matching</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pattern:</span></span>
<span class="line"><span style="color:#24292E;">            match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pattern.match(message_text)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> match:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.function</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@abstractmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">                     task: </span><span style="color:#032F62;">&quot;TaskHeader&quot;</span><span style="color:#24292E;">, receiver: </span><span style="color:#032F62;">&quot;TaskHeader.Location&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                     exception, env: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                     arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, pending_task: </span><span style="color:#032F62;">&quot;TaskBatch&quot;</span><span style="color:#24292E;">, refer_llm_result: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                     ):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Usually write-back message + notification message</span></span>
<span class="line"><span style="color:#032F62;">        :param task: task</span></span>
<span class="line"><span style="color:#032F62;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#032F62;">        :param exception: exception</span></span>
<span class="line"><span style="color:#032F62;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#032F62;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#032F62;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#032F62;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@abstractmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">                       task: </span><span style="color:#032F62;">&quot;TaskHeader&quot;</span><span style="color:#24292E;">, receiver: </span><span style="color:#032F62;">&quot;TaskHeader.Location&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                       env: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                       arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, pending_task: </span><span style="color:#032F62;">&quot;TaskBatch&quot;</span><span style="color:#24292E;">, refer_llm_result: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">                       ):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        This function will be called if the operation is successful</span></span>
<span class="line"><span style="color:#032F62;">        :param task: task</span></span>
<span class="line"><span style="color:#032F62;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#032F62;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#032F62;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#032F62;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#032F62;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@abstractmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  task: </span><span style="color:#032F62;">&quot;TaskHeader&quot;</span><span style="color:#24292E;">, receiver: </span><span style="color:#032F62;">&quot;TaskHeader.Location&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, env: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, pending_task: </span><span style="color:#032F62;">&quot;TaskBatch&quot;</span><span style="color:#24292E;">, refer_llm_result: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  ):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Process the function and return the writeback result</span></span>
<span class="line"><span style="color:#032F62;">        :param task: task</span></span>
<span class="line"><span style="color:#032F62;">        :param receiver: receiver</span></span>
<span class="line"><span style="color:#032F62;">        :param arg: parameter</span></span>
<span class="line"><span style="color:#032F62;">        :param env: environment variable</span></span>
<span class="line"><span style="color:#032F62;">        :param pending_task: task batch</span></span>
<span class="line"><span style="color:#032F62;">        :param refer_llm_result: last result</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The <code>callback</code> function has no effect at the moment.</p></div><p>Please consider internationalization when constructing keyword parameters, and try to avoid public keywords, and single-word keywords are prohibited.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>After inheriting the <code>BaseTool</code> class, it is forbidden to define <code>__init__</code></strong></p></div><h4 id="🎳-dynamic-activation" tabindex="-1">🎳 Dynamic activation <a class="header-anchor" href="#🎳-dynamic-activation" aria-label="Permalink to &quot;🎳 Dynamic activation&quot;">​</a></h4><p>After each conversation is delivered, a new function table will be constructed based on the user corpus. The plugin selector determines which candidate functions are based on character matches, <code>keywords</code> and <code>pattern</code> The parameters determine whether this conversation is a candidate for this function.</p><p>The <code>func_message</code> function determines whether this function is activated.</p><p>After <code>file_match_required</code> is defined, it will be matched in the file message. If the match is successful, this function will be activated, otherwise it will be disabled!</p><p>The <code>deploy_child</code> parameter determines whether this function continues to pass down (the end marker).</p><p>During each recursion, the last function will be ignored. If you want the function to be reusable, you can set the <code>repeatable</code> attribute.</p><p>The default chain recursion depth is 6, defined through the <code>limit_child</code> attribute. <strong>The plug-in prohibits redefining this parameter.</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When a new dialogue chain is started, the first node will inherit the function attributes of the previous dialogue chain.</p></div><h4 id="🧃-env-statement-authorization-system" tabindex="-1">🧃 Env statement authorization system <a class="header-anchor" href="#🧃-env-statement-authorization-system" aria-label="Permalink to &quot;🧃 Env statement authorization system&quot;">​</a></h4><ul><li>Statement</li></ul><p>Set the <code>env_required</code> attribute to declare the required constants.</p><ul><li>Setup documentation</li></ul><p>Subclasses override the <code>env_help_docs</code> function to return help documentation. This document is called when a variable is missing and is sent to the user.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self,</span></span>
<span class="line"><span style="color:#E1E4E8;">              task: </span><span style="color:#9ECBFF;">&quot;TaskHeader&quot;</span><span style="color:#E1E4E8;">, receiver: </span><span style="color:#9ECBFF;">&quot;TaskHeader.Location&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, env: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, pending_task: </span><span style="color:#9ECBFF;">&quot;TaskBatch&quot;</span><span style="color:#E1E4E8;">, refer_llm_result: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              ):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(env)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">              task: </span><span style="color:#032F62;">&quot;TaskHeader&quot;</span><span style="color:#24292E;">, receiver: </span><span style="color:#032F62;">&quot;TaskHeader.Location&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, env: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, pending_task: </span><span style="color:#032F62;">&quot;TaskBatch&quot;</span><span style="color:#24292E;">, refer_llm_result: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              ):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(env)</span></span></code></pre></div><h3 id="🥄-register-meta-information" tabindex="-1">🥄 Register meta information <a class="header-anchor" href="#🥄-register-meta-information" aria-label="Permalink to &quot;🥄 Register meta information&quot;">​</a></h3><p>Core class <code>PluginMetadata</code>, you can view its composition <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L84" target="_blank" rel="noreferrer">here</a>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># name</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__openapi_version__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">PluginMetadata, FuncPair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># import</span></span>
<span class="line"><span style="color:#6A737D;"># The middle is the function code...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Core meta information</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_meta__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">openapi_version</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__openapi_version__,  </span><span style="color:#6A737D;"># OPENAPI version </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        FuncPair(</span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bilibili, </span><span style="color:#FFAB70;">tool</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BiliBiliSearch)  </span><span style="color:#6A737D;"># Function class and tool class</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># name</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#24292E;">__openapi_version__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">PluginMetadata, FuncPair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># import</span></span>
<span class="line"><span style="color:#6A737D;"># The middle is the function code...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Core meta information</span></span>
<span class="line"><span style="color:#24292E;">__plugin_meta__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#E36209;">openapi_version</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__openapi_version__,  </span><span style="color:#6A737D;"># OPENAPI version </span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line diff add"><span style="color:#24292E;">        FuncPair(</span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bilibili, </span><span style="color:#E36209;">tool</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BiliBiliSearch)  </span><span style="color:#6A737D;"># Function class and tool class</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>FuncPair</code> binds <code>function</code> function class and <code>tool</code> tool class.</p></div><p>The <code>openapi_version</code> parameter records the current synchronized version. If the host framework is updated, the Plugin may need to synchronize this parameter to support the new interface.</p><div class="tip custom-block"><p class="custom-block-title">When do I need to update my plugin?</p><p>The OpenAPI component will set which versions of the plug-in can be loaded. If your plug-in version is too low, an error will be reported, and you will receive an Issue from the user.</p></div><h3 id="🥥-a-priori-trigger" tabindex="-1">🥥 A priori trigger <a class="header-anchor" href="#🥥-a-priori-trigger" aria-label="Permalink to &quot;🥥 A priori trigger&quot;">​</a></h3><p>Use this decorator to block or pass responses that meet certain conditions. Used for filtering sensitive words, actively responding to special paragraphs without commands, dynamically configuring response triggers, rejecting answers from certain users, etc.</p><div class="language-jupyterpython vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jupyterpython</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@resign_trigger(Trigger(on_platform=&quot;telegram&quot;, action=&quot;deny&quot;, priority=0))</span></span>
<span class="line"><span style="color:#e1e4e8;">async def on_chat_message(message: str, uid: str, **kwargs):</span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    :param message: RawMessage</span></span>
<span class="line"><span style="color:#e1e4e8;">    :return:</span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    if &quot;&lt;hello&gt;&quot; in message:</span></span>
<span class="line"><span style="color:#e1e4e8;">        return True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@resign_trigger(Trigger(on_platform=&quot;telegram&quot;, action=&quot;deny&quot;, priority=0))</span></span>
<span class="line"><span style="color:#24292e;">async def on_chat_message(message: str, uid: str, **kwargs):</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">    :param message: RawMessage</span></span>
<span class="line"><span style="color:#24292e;">    :return:</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">    if &quot;&lt;hello&gt;&quot; in message:</span></span>
<span class="line"><span style="color:#24292e;">        return True</span></span></code></pre></div><p>If the function returns <code>True</code>, it indicates that a pre-action is required.</p><h3 id="🔨-error-hook" tabindex="-1">🔨 Error Hook <a class="header-anchor" href="#🔨-error-hook" aria-label="Permalink to &quot;🔨 Error Hook&quot;">​</a></h3><p>Use this decorator to monitor action functions for errors. After too many errors are recorded, this function plug-in will not be called.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@resign_plugin_executor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">search)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search_in_bilibili</span><span style="color:#E1E4E8;">(arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@resign_plugin_executor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">search)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search_in_bilibili</span><span style="color:#24292E;">(arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>Note that this is a sync decorator, if your function is asynchronous, you can call utils.sync.</p><h3 id="🍩-routing-communication" tabindex="-1">🍩 Routing communication <a class="header-anchor" href="#🍩-routing-communication" aria-label="Permalink to &quot;🍩 Routing communication&quot;">​</a></h3><p>We route communication to each platform by defining <code>Meta</code> and <code>Location</code> in the task message. Specific examples are as follows:</p><p>Location can be inherited. Because you don&#39;t know who the other users are.</p><h4 id="📕-communication-mode" tabindex="-1">📕 Communication mode <a class="header-anchor" href="#📕-communication-mode" aria-label="Permalink to &quot;📕 Communication mode&quot;">​</a></h4><p><code>Meta</code> has the following internally maintained constructors:</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>callback</code> receives a list of <code>TaskHeader.Meta.Callback</code> objects, which are used to record the callback information of plugin!</p></div><h5 id="📍reply-notify-notification-reply" tabindex="-1">📍<code>reply_notify</code> notification reply <a class="header-anchor" href="#📍reply-notify-notification-reply" aria-label="Permalink to &quot;📍\`reply_notify\` notification reply&quot;">​</a></h5><p>Notification only, does not write back memory records, and does not trigger any processing.</p><p>Used for error notifications or one-way notifications.</p><p><em>Examples of applicable message content</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">An error has occurred and youThere are no constants required to configure the plugin.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">An error has occurred and youThere are no constants required to configure the plugin.</span></span></code></pre></div><h5 id="📍reply-raw-reply-to-unreadable-content" tabindex="-1">📍<code>reply_raw</code> Reply to unreadable content <a class="header-anchor" href="#📍reply-raw-reply-to-unreadable-content" aria-label="Permalink to &quot;📍\`reply_raw\` Reply to unreadable content&quot;">​</a></h5><p>This message will be written back into the memory record, as the object being queried, and will be processed by LLM as a reply. For example, search, data set query results.</p><p><em>Examples of applicable message content</em></p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;query content&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Query result 1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Query result 2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Query result 3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;query content&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Query result 1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Query result 2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Query result 3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong><code>reply_raw</code> cannot reply to file messages.</strong></p></div><h5 id="📍reply-message-reply-to-readable-content-file-message" tabindex="-1">📍<code>reply_message</code> Reply to readable content/file message <a class="header-anchor" href="#📍reply-message-reply-to-readable-content-file-message" aria-label="Permalink to &quot;📍\`reply_message\` Reply to readable content/file message&quot;">​</a></h5><p>This message is for execution replies. Reply with human-readable content. Write back the memory record and reply directly.</p><p><em>Examples of applicable message content</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">After querying, your Genshin Impact account is: 123456789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">After querying, your Genshin Impact account is: 123456789</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">file message</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">file message</span></span></code></pre></div><h4 id="📕-custom-communication-mode" tabindex="-1">📕 Custom communication mode <a class="header-anchor" href="#📕-custom-communication-mode" aria-label="Permalink to &quot;📕 Custom communication mode&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">task </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">receiver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">_search_result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">Task, TaskHeader, RawMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pending_task </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> task.task_meta.child(__plugin_name__)  </span><span style="color:#6A737D;"># Custom </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward_reprocess </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.direct_reply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.write_back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.release_chain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    TaskHeader.Meta.Callback.create(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">function_response</span><span style="color:#F97583;">=</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Run Failed&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">tool_call_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pending_task.get_batch_id()</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Task.create_and_send(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">queue_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.platform,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">task</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TaskHeader(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">sender</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task.sender,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">receiver</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">task_meta</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_meta,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">                RawMessage(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.user_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">chat_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">=</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;🍖</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">__plugin_name__</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> Run Failed: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">exception</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">receiver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">_search_result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">Task, TaskHeader, RawMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pending_task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> task.task_meta.child(__plugin_name__)  </span><span style="color:#6A737D;"># Custom </span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward_reprocess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.direct_reply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.write_back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.release_chain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    TaskHeader.Meta.Callback.create(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">function_response</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Run Failed&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">tool_call_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pending_task.get_batch_id()</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Task.create_and_send(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">queue_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.platform,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">task</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TaskHeader(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">sender</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task.sender,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">receiver</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">task_meta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_meta,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">                RawMessage(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.user_id,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">chat_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;🍖</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">__plugin_name__</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> Run Failed: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">exception</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><p>Among them, the <code>task_meta</code> parameter must be cloned from the <code>child</code> function of <code>task_meta</code> passed by the function.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is forbidden to modify the <code>continue_step</code> and <code>limit_child</code> attributes, which will affect the recursion depth.</p></div><h2 id="🎃-access-create-files-in-the-plugin" tabindex="-1">🎃 Access/create files in the plugin <a class="header-anchor" href="#🎃-access-create-files-in-the-plugin" aria-label="Permalink to &quot;🎃 Access/create files in the plugin&quot;">​</a></h2><p>Redis upload and download rely on a short file ID.</p><p>Refer to the following processing</p><h3 id="📥-download-file" tabindex="-1">📥 Download file <a class="header-anchor" href="#📥-download-file" aria-label="Permalink to &quot;📥 Download file&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task: TaskHeader, receiver: TaskHeader.Location, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    Process message and return message</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    _translate_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> task.message:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item.file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.file:</span></span>
<span class="line"><span style="color:#E1E4E8;">                _translate_file.append(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">        _file_obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> i.raw_file()</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sorted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(_translate_file), </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_translate_file.index)]</span></span>
<span class="line"><span style="color:#E1E4E8;">        _file_obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [item </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> _file_obj </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task: TaskHeader, receiver: TaskHeader.Location, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Process message and return message</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    _translate_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> task.message:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item.file:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.file:</span></span>
<span class="line"><span style="color:#24292E;">                _translate_file.append(i)</span></span>
<span class="line"><span style="color:#24292E;">        _file_obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> i.raw_file()</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sorted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(_translate_file), </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_translate_file.index)]</span></span>
<span class="line"><span style="color:#24292E;">        _file_obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [item </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> _file_obj </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item]</span></span></code></pre></div><h3 id="📤-upload-files" tabindex="-1">📤 Upload files <a class="header-anchor" href="#📤-upload-files" aria-label="Permalink to &quot;📤 Upload files&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> File.upload_file(</span><span style="color:#FFAB70;">file_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">file_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      </span><span style="color:#FFAB70;">file_data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">file_data,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      </span><span style="color:#FFAB70;">created_by</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">uid</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Use utils.sync to convert async to sync</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sync(File.upload_file(</span><span style="color:#FFAB70;">file_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">file_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">file_data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">file_data,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">created_by</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">uid</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     )</span></span>
<span class="line"><span style="color:#E1E4E8;">                    )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    file_obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> File.upload_file(</span><span style="color:#E36209;">file_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">file_name,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#E36209;">file_data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">file_data,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#E36209;">created_by</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">uid</span></span>
<span class="line"><span style="color:#24292E;">                                      )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Use utils.sync to convert async to sync</span></span>
<span class="line"><span style="color:#24292E;">    file_obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sync(File.upload_file(</span><span style="color:#E36209;">file_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">file_name,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">file_data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">file_data,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">created_by</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">uid</span></span>
<span class="line"><span style="color:#24292E;">                                     )</span></span>
<span class="line"><span style="color:#24292E;">                    )</span></span></code></pre></div><h2 id="📩-register-entrypoint-group" tabindex="-1">📩 Register EntryPoint Group <a class="header-anchor" href="#📩-register-entrypoint-group" aria-label="Permalink to &quot;📩 Register EntryPoint Group&quot;">​</a></h2><p>Document reference <a href="https://python-poetry.org/docs/pyproject/#plugins" target="_blank" rel="noreferrer">https://python-poetry.org/docs/pyproject/#plugins</a></p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;llmkira</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">extra</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugin&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># Both front and back must be unique, which will be used when registering hooks.</span></span>
<span class="line"><span style="color:#E1E4E8;">bilisearch = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;llmkira</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">extra</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugin&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># Both front and back must be unique, which will be used when registering hooks.</span></span>
<span class="line"><span style="color:#24292E;">bilisearch = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><p>After the equal sign is the package name of the plug-in, and in front is the unique key (please make sure it does not conflict with other plug-ins)</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">name = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>must register</strong> an EntryPoint to be retrieved by the bot launcher.</p></div><h2 id="🔨-release-package" tabindex="-1">🔨 Release package <a class="header-anchor" href="#🔨-release-package" aria-label="Permalink to &quot;🔨 Release package&quot;">​</a></h2><p><code>poetry publish</code> publishes the package, or uses CI to publish automatically.</p><h3 id="🔧-️package-management-instructions" tabindex="-1">🔧 ️Package management instructions <a class="header-anchor" href="#🔧-️package-management-instructions" aria-label="Permalink to &quot;🔧 ️Package management instructions&quot;">​</a></h3><p>Every time you upgrade, update the <code>version</code> field.</p><h3 id="⚙️-ci-automatic-release" tabindex="-1">⚙️ CI automatic release <a class="header-anchor" href="#⚙️-ci-automatic-release" aria-label="Permalink to &quot;⚙️ CI automatic release&quot;">​</a></h3><p>Write the following content in the <code>.github/workflows/publish.yml</code> file:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">publish</span></span>
<span class="line"><span style="color:#79B8FF;">on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">tags</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">-v*</span></span>
<span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">release</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Publish python package</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">pypi_token</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">publish</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">tags</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">-v*</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">release</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Publish python package</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">pypi_token</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre></div><p>Create a new <code>Release</code> in the lower right corner of the main interface of the warehouse, and create a new tag starting with <code>v</code>. Once created, automatic release can be triggered.</p>`,132),e=[o];function t(c,r,i,y,E,u){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
