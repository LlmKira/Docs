import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.63944a88.js";const u=JSON.parse('{"title":"中间件","description":"","frontmatter":{},"headers":[],"relativePath":"dev/middleware.md","filePath":"dev/middleware.md","lastUpdated":1698080316000}'),p={name:"dev/middleware.md"},o=l(`<h1 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h1><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">platform</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">user_id</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">platform</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">user_id</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><h2 id="🔩-媒体类型转换器" tabindex="-1">🔩 媒体类型转换器 <a class="header-anchor" href="#🔩-媒体类型转换器" aria-label="Permalink to &quot;🔩 媒体类型转换器&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>此节内容错误</p></div><p>用于转换媒体类型和注入文件对象。用于 Tts场景，文本转文件发送场景。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.schema </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> File</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.transducer </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> resign_transfer, Builder, Parser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">__receiver_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;discord&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@resign_transfer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">agent_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__receiver_name__)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(self, message, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args) -&gt; (</span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">, List[File]):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        坐落 receiver 平台,仅仅 hook LLM 的正常回复，即 reply 函数。</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param message: 单条通用消息 (RawMessage)</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param args: 其他参数</span></span>
<span class="line"><span style="color:#9ECBFF;">        :return: 是否放弃发送文本, 需要发送的文件列表(RawMessage.upload)</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, []</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@resign_transfer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">agent_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__receiver_name__)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Parser</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Parser</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(self, message, file: List[File], </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args) -&gt; (</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">, List[File]):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        接收 sender 平台的 **原始** 消息，返回文件。</span></span>
<span class="line"><span style="color:#9ECBFF;">        需要注意的是，这里的 message 是原始消息，不是我们转换后的通用消息类型。</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param message: 单条原始消息</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param file: 文件列表</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param args: 其他参数</span></span>
<span class="line"><span style="color:#9ECBFF;">        :return: 返回 **追加的** 消息列表,返回文件列表, </span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [], </span><span style="color:#FFAB70;">file</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.schema </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> File</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.transducer </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> resign_transfer, Builder, Parser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">__receiver_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;discord&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@resign_transfer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">agent_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__receiver_name__)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(self, message, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args) -&gt; (</span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">, List[File]):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        坐落 receiver 平台,仅仅 hook LLM 的正常回复，即 reply 函数。</span></span>
<span class="line"><span style="color:#032F62;">        :param message: 单条通用消息 (RawMessage)</span></span>
<span class="line"><span style="color:#032F62;">        :param args: 其他参数</span></span>
<span class="line"><span style="color:#032F62;">        :return: 是否放弃发送文本, 需要发送的文件列表(RawMessage.upload)</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, []</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@resign_transfer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">agent_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__receiver_name__)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Parser</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Parser</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(self, message, file: List[File], </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args) -&gt; (</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">, List[File]):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        接收 sender 平台的 **原始** 消息，返回文件。</span></span>
<span class="line"><span style="color:#032F62;">        需要注意的是，这里的 message 是原始消息，不是我们转换后的通用消息类型。</span></span>
<span class="line"><span style="color:#032F62;">        :param message: 单条原始消息</span></span>
<span class="line"><span style="color:#032F62;">        :param file: 文件列表</span></span>
<span class="line"><span style="color:#032F62;">        :param args: 其他参数</span></span>
<span class="line"><span style="color:#032F62;">        :return: 返回 **追加的** 消息列表,返回文件列表, </span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [], </span><span style="color:#E36209;">file</span></span></code></pre></div><ul><li>Builder 的被使用场景</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 转析器</span></span>
<span class="line"><span style="color:#E1E4E8;">_transfer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransferManager().receiver_builder(</span><span style="color:#FFAB70;">agent_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__receiver__)</span></span>
<span class="line"><span style="color:#E1E4E8;">just_file, file_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _transfer().build(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 转析器</span></span>
<span class="line"><span style="color:#24292E;">_transfer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransferManager().receiver_builder(</span><span style="color:#E36209;">agent_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__receiver__)</span></span>
<span class="line"><span style="color:#24292E;">just_file, file_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _transfer().build(</span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">item)</span></span></code></pre></div><ul><li>Parser 的被使用场景</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 转析器</span></span>
<span class="line"><span style="color:#E1E4E8;">_transfer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransferManager().sender_parser(</span><span style="color:#FFAB70;">agent_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__sender__)</span></span>
<span class="line"><span style="color:#E1E4E8;">deliver_back_message, _file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _transfer().parse(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">message, </span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_file)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 转析器</span></span>
<span class="line"><span style="color:#24292E;">_transfer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransferManager().sender_parser(</span><span style="color:#E36209;">agent_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__sender__)</span></span>
<span class="line"><span style="color:#24292E;">deliver_back_message, _file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _transfer().parse(</span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">message, </span><span style="color:#E36209;">file</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_file)</span></span></code></pre></div><h2 id="🍟-计费组件" tabindex="-1">🍟 计费组件 <a class="header-anchor" href="#🍟-计费组件" aria-label="Permalink to &quot;🍟 计费组件&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.middleware.user </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SubManager, UserInfo</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EXP</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    用法示例</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">llm_task</span><span style="color:#E1E4E8;">(task, task_desc, raw_data):</span></span>
<span class="line"><span style="color:#E1E4E8;">        _submanager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SubManager(</span><span style="color:#FFAB70;">user_id</span><span style="color:#F97583;">=</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">task.sender.platform</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">task.sender.user_id</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _submanager.llm_driver  </span><span style="color:#6A737D;"># 由发送人承担接受者的成本</span></span>
<span class="line"><span style="color:#E1E4E8;">        model_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.getenv(</span><span style="color:#9ECBFF;">&quot;OPENAI_API_MODEL&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;gpt-3.5-turbo-0613&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> openai.Openai(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">messages</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Message.create_task_message_list(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#FFAB70;">task_desc</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_desc,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#FFAB70;">refer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">raw_data</span></span>
<span class="line"><span style="color:#E1E4E8;">            ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 调用Openai</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> endpoint.create()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> _submanager.add_cost(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">cost</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">UserInfo.Cost(</span><span style="color:#FFAB70;">token_usage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">result.usage.total_tokens, </span><span style="color:#FFAB70;">token_uuid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver.uuid, </span><span style="color:#FFAB70;">model_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.default_message.content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.middleware.user </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SubManager, UserInfo</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EXP</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    用法示例</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">staticmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">llm_task</span><span style="color:#24292E;">(task, task_desc, raw_data):</span></span>
<span class="line"><span style="color:#24292E;">        _submanager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SubManager(</span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">task.sender.platform</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">task.sender.user_id</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _submanager.llm_driver  </span><span style="color:#6A737D;"># 由发送人承担接受者的成本</span></span>
<span class="line"><span style="color:#24292E;">        model_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.getenv(</span><span style="color:#032F62;">&quot;OPENAI_API_MODEL&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;gpt-3.5-turbo-0613&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> openai.Openai(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">config</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model_name,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">messages</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Message.create_task_message_list(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">task_desc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_desc,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">refer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">raw_data</span></span>
<span class="line"><span style="color:#24292E;">            ),</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 调用Openai</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> endpoint.create()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> _submanager.add_cost(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">cost</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">UserInfo.Cost(</span><span style="color:#E36209;">token_usage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">result.usage.total_tokens, </span><span style="color:#E36209;">token_uuid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver.uuid, </span><span style="color:#E36209;">model_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model_name)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.default_message.content</span></span></code></pre></div><h2 id="🍳-定时任务注册" tabindex="-1">🍳 定时任务注册 <a class="header-anchor" href="#🍳-定时任务注册" aria-label="Permalink to &quot;🍳 定时任务注册&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.receiver.aps </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SCHEDULER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SCHEDULER</span><span style="color:#E1E4E8;">.add_job(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_send,  </span><span style="color:#6A737D;"># 异步函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(time.time()),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">trigger</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">replace_existing</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">run_date</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">datetime.datetime.now() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> datetime.timedelta(</span><span style="color:#FFAB70;">minutes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_set.delay),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[receiver, _set]  </span><span style="color:#6A737D;"># 参数传递</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 启动</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SCHEDULER</span><span style="color:#E1E4E8;">.start()</span></span>
<span class="line"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.receiver.aps </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SCHEDULER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SCHEDULER</span><span style="color:#24292E;">.add_job(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_send,  </span><span style="color:#6A737D;"># 异步函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(time.time()),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">trigger</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;date&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">replace_existing</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">run_date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">datetime.datetime.now() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> datetime.timedelta(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_set.delay),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[receiver, _set]  </span><span style="color:#6A737D;"># 参数传递</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 启动</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SCHEDULER</span><span style="color:#24292E;">.start()</span></span>
<span class="line"><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><h2 id="🥞-env" tabindex="-1">🥞 ENV <a class="header-anchor" href="#🥞-env" aria-label="Permalink to &quot;🥞 ENV&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">_env_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> EnvManager.from_uid(</span><span style="color:#FFAB70;">uid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_task.receiver.uid).get_env_list(</span><span style="color:#FFAB70;">name_list</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_tool_obj.env_required)</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(_env_dict, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;env_dict must be dict&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">_env_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> EnvManager.from_uid(</span><span style="color:#E36209;">uid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_task.receiver.uid).get_env_list(</span><span style="color:#E36209;">name_list</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_tool_obj.env_required)</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(_env_dict, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;env_dict must be dict&quot;</span></span></code></pre></div>`,16),e=[o];function t(r,c,y,E,i,F){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{u as __pageData,_ as default};
