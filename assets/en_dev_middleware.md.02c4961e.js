import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b81f03d3.js";const u=JSON.parse('{"title":"middleware","description":"","frontmatter":{},"headers":[],"relativePath":"en/dev/middleware.md","filePath":"en/dev/middleware.md","lastUpdated":1698554094000}'),p={name:"en/dev/middleware.md"},o=l(`<h1 id="middleware" tabindex="-1">middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;middleware&quot;">​</a></h1><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">platform</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">user_id</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">platform</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">user_id</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><h2 id="🔩-media-type-converter" tabindex="-1">🔩 Media type converter <a class="header-anchor" href="#🔩-media-type-converter" aria-label="Permalink to &quot;🔩 Media type converter&quot;">​</a></h2><p>Used to convert media types and inject file objects. Used in Tts scenarios, text-to-file sending scenarios.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@resign_transfer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMessageBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    sign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransferMata(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">platform</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">),  </span><span style="color:#6A737D;"># 匹配所有</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">plugin_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">agent</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;receiver&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">priority</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(self, arg) -&gt; Any:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arg</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@resign_transfer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultMessageParser</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Parser</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    sign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransferMata(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">platform</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">),  </span><span style="color:#6A737D;"># 匹配所有</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">plugin_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">agent</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;sender&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">priority</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(self, arg) -&gt; Any:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@resign_transfer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMessageBuilder</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    sign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransferMata(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">platform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">),  </span><span style="color:#6A737D;"># 匹配所有</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">plugin_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">agent</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;receiver&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">priority</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(self, arg) -&gt; Any:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arg</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@resign_transfer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMessageParser</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Parser</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    sign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransferMata(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">platform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">),  </span><span style="color:#6A737D;"># 匹配所有</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">plugin_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">agent</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sender&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">priority</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(self, arg) -&gt; Any:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arg</span></span></code></pre></div><h2 id="🍟-billing-component" tabindex="-1">🍟 Billing component <a class="header-anchor" href="#🍟-billing-component" aria-label="Permalink to &quot;🍟 Billing component&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> loguru </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> logger</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tenacity </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> retry, stop_after_attempt, stop_after_delay, wait_fixed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.extra.user </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> CostControl, UserCost</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.middleware.llm_provider </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> GetAuthDriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.endpoint </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> openai</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.schema </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Message</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.task </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> TaskHeader</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@retry</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">stop</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(stop_after_attempt(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> stop_after_delay(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)), </span><span style="color:#FFAB70;">wait</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">wait_fixed(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">reraise</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">llm_task</span><span style="color:#E1E4E8;">(plugin_name, task: TaskHeader, task_desc: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, raw_data: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.info(</span><span style="color:#9ECBFF;">&quot;llm_tool:</span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(task_desc))</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth_client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GetAuthDriver(</span><span style="color:#FFAB70;">uid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task.sender.uid)</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> auth_client.get()</span></span>
<span class="line"><span style="color:#E1E4E8;">    endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> openai.Openai(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver.model,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">temperature</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">messages</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Message.create_short_task(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">task_desc</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_desc,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">refer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">raw_data,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 调用Openai</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> endpoint.create()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 记录消耗</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> CostControl.add_cost(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">cost</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">UserCost.create_from_function(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">uid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task.sender.uid,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">request_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">result.id,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">cost_by</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">plugin_name,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">token_usage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">result.usage.total_tokens,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">token_uuid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver.uuid,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">model_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">driver.model</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.default_message.content, </span><span style="color:#9ECBFF;">&quot;llm_task.py:llm_task:content is None&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.default_message.content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> loguru </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> logger</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tenacity </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> retry, stop_after_attempt, stop_after_delay, wait_fixed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.extra.user </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> CostControl, UserCost</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.middleware.llm_provider </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> GetAuthDriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.endpoint </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> openai</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.schema </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Message</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.task </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> TaskHeader</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@retry</span><span style="color:#24292E;">(</span><span style="color:#E36209;">stop</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(stop_after_attempt(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> stop_after_delay(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)), </span><span style="color:#E36209;">wait</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">wait_fixed(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), </span><span style="color:#E36209;">reraise</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">llm_task</span><span style="color:#24292E;">(plugin_name, task: TaskHeader, task_desc: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, raw_data: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    logger.info(</span><span style="color:#032F62;">&quot;llm_tool:</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(task_desc))</span></span>
<span class="line"><span style="color:#24292E;">    auth_client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GetAuthDriver(</span><span style="color:#E36209;">uid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task.sender.uid)</span></span>
<span class="line"><span style="color:#24292E;">    driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> auth_client.get()</span></span>
<span class="line"><span style="color:#24292E;">    endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> openai.Openai(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">config</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver.model,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">temperature</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">messages</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Message.create_short_task(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">task_desc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_desc,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">refer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">raw_data,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 调用Openai</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> endpoint.create()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 记录消耗</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> CostControl.add_cost(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">cost</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">UserCost.create_from_function(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">uid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task.sender.uid,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">request_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">result.id,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">cost_by</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plugin_name,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">token_usage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">result.usage.total_tokens,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">token_uuid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver.uuid,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">model_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">driver.model</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.default_message.content, </span><span style="color:#032F62;">&quot;llm_task.py:llm_task:content is None&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.default_message.content</span></span></code></pre></div><h2 id="🍳-scheduled-task-registration" tabindex="-1">🍳 Scheduled task registration <a class="header-anchor" href="#🍳-scheduled-task-registration" aria-label="Permalink to &quot;🍳 Scheduled task registration&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.receiver.aps </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SCHEDULER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SCHEDULER</span><span style="color:#E1E4E8;">.add_job(</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_send, </span><span style="color:#6A737D;"># asynchronous function</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(time.time()),</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">trigger</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">replace_existing</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">run_date</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">datetime.datetime.now() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> datetime.timedelta(</span><span style="color:#FFAB70;">minutes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_set.delay),</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[receiver, _set] </span><span style="color:#6A737D;">#Parameter passing</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># start up</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">SCHEDULER</span><span style="color:#E1E4E8;">.start()</span></span>
<span class="line"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.receiver.aps </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SCHEDULER</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SCHEDULER</span><span style="color:#24292E;">.add_job(</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_send, </span><span style="color:#6A737D;"># asynchronous function</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(time.time()),</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">trigger</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;date&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">replace_existing</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">run_date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">datetime.datetime.now() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> datetime.timedelta(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_set.delay),</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[receiver, _set] </span><span style="color:#6A737D;">#Parameter passing</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># start up</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">SCHEDULER</span><span style="color:#24292E;">.start()</span></span>
<span class="line"><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">pass</span></span></code></pre></div><h2 id="🥞env" tabindex="-1">🥞ENV <a class="header-anchor" href="#🥞env" aria-label="Permalink to &quot;🥞ENV&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    _env_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> EnvManager.from_uid(</span><span style="color:#FFAB70;">uid</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_task.receiver.uid).get_env_list(</span><span style="color:#FFAB70;">name_list</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_tool_obj.env_required)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(_env_dict, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;env_dict must be dict&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    _env_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> EnvManager.from_uid(</span><span style="color:#E36209;">uid</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_task.receiver.uid).get_env_list(</span><span style="color:#E36209;">name_list</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_tool_obj.env_required)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(_env_dict, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;env_dict must be dict&quot;</span></span></code></pre></div>`,11),e=[o];function t(r,c,y,E,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
