import{_ as s,c as a,o as n,a as l}from"./app.20d1bb53.js";const A=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[{"level":2,"title":"BlipServer 图片理解 组件","slug":"blipserver-图片理解-组件","link":"#blipserver-图片理解-组件","children":[{"level":3,"title":"编辑 config.toml","slug":"编辑-config-toml","link":"#编辑-config-toml","children":[]}]},{"level":2,"title":"MoeGoe Docker 组件","slug":"moegoe-docker-组件","link":"#moegoe-docker-组件","children":[]},{"level":2,"title":"Openaibot 主体 安装","slug":"openaibot-主体-安装","link":"#openaibot-主体-安装","children":[{"level":3,"title":"独立使用 Redis","slug":"独立使用-redis","link":"#独立使用-redis","children":[]}]}],"relativePath":"guide/docker.md","lastUpdated":1679128681000}'),e={name:"guide/docker.md"},o=l(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-hidden="true">#</a></h1><p>该教程的实时环境是 BlipServer MoeGoe Openaibot 部署在不同服务器上。</p><p>首先，你需要预先安装好 <code>docker</code> 和 <code>docker-compose</code>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span>
<span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/docker/compose/releases/latest/download/docker-compose-</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -s</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -m</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/dc</span></span>
<span class="line"><span style="color:#FFCB6B;">dc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><h2 id="blipserver-图片理解-组件" tabindex="-1">BlipServer 图片理解 组件 <a class="header-anchor" href="#blipserver-图片理解-组件" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/BlipServer</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BlipServer</span></span>
<span class="line"></span></code></pre></div><h3 id="编辑-config-toml" tabindex="-1">编辑 config.toml <a class="header-anchor" href="#编辑-config-toml" aria-hidden="true">#</a></h3><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">device </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#or cpu</span></span>
<span class="line"></span></code></pre></div><p>保存后执行下面的命令</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">dc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>
<span class="line"></span></code></pre></div><h2 id="moegoe-docker-组件" tabindex="-1">MoeGoe Docker 组件 <a class="header-anchor" href="#moegoe-docker-组件" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/MoeGoe</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MoeGoe</span></span>
<span class="line"></span></code></pre></div><p>然后在 model 下放模型 （自己去下载）像这样</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">model</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- somemodel.pth</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- somemodel.pth.json ( == config.json)</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- info.json</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="openaibot-主体-安装" tabindex="-1">Openaibot 主体 安装 <a class="header-anchor" href="#openaibot-主体-安装" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/Openaibot.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Openaibot</span></span>
<span class="line"></span></code></pre></div><ul><li>配置</li></ul><p>按教程在 Config 下配置完毕。</p><ul><li>构建</li></ul><p>如果 BlipServer 和 Openaibot 没有部署在同一台服务器。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml.bak</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span></span>
<span class="line"></span></code></pre></div><p>如果 BlipServer 和 Openaibot 部署在同一台服务器。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nano</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ctrl + _ :28 </span></span>
<span class="line"></span></code></pre></div><p>修改 docker-compose.yml L28 行BlipServer的文件位置绝对路径。同时 BlipServer 那一步 <strong>不需要</strong> <code>dc up -v</code> 如果执行了请停止那个docker就行。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/ubuntu/BlipServer/:/app</span></span>
<span class="line"></span></code></pre></div><p><code>dc up -d</code> ，搞定。</p><h3 id="独立使用-redis" tabindex="-1">独立使用 Redis <a class="header-anchor" href="#独立使用-redis" aria-hidden="true">#</a></h3><p>如果你想独立使用 <code>redis</code> 数据服务器，可以删掉<code>docker-compose.yml.bak</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis</span></span>
<span class="line"></span></code></pre></div><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">redis</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis:latest</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./redis:/data</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">6379:6379</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BlipServer</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app-tier</span></span>
<span class="line"></span></code></pre></div>`,30),p=[o];function c(t,r,i,C,d,y){return n(),a("div",null,p)}const h=s(e,[["render",c]]);export{A as __pageData,h as default};
