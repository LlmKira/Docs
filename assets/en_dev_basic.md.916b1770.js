import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3e9aee8a.js";const h=JSON.parse('{"title":"📝 Plugin Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/dev/basic.md","filePath":"en/dev/basic.md","lastUpdated":1697974474000}'),e={name:"en/dev/basic.md"},o=l(`<h1 id="📝-plugin-development-guide" tabindex="-1">📝 Plugin Development Guide <a class="header-anchor" href="#📝-plugin-development-guide" aria-label="Permalink to &quot;📝 Plugin Development Guide&quot;">​</a></h1><p>The sample plugin library used in this article: <a href="https://github.com/LlmKira/llmbot_plugin_bilisearch" target="_blank" rel="noreferrer">https://github.com/LlmKira/llmbot_plugin_bilisearch</a></p><p>OpenaiBot provides an OPENAPI interface registration system for third-party plugins. This article will introduce how to build a plugin.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because the plugin mechanism is implemented with reference to <code>Nonebot</code>, plugin development is similar to NoneBot Plugin.</p></div><h2 id="📌-structure" tabindex="-1">📌 Structure <a class="header-anchor" href="#📌-structure" aria-label="Permalink to &quot;📌 Structure&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Infrastructure example</span></span>
<span class="line"><span style="color:#e1e4e8;">├── LICENSE</span></span>
<span class="line"><span style="color:#e1e4e8;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#e1e4e8;">│ └─ __init__.py</span></span>
<span class="line"><span style="color:#e1e4e8;">├── poetry.lock</span></span>
<span class="line"><span style="color:#e1e4e8;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#e1e4e8;">└── README.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Infrastructure example</span></span>
<span class="line"><span style="color:#24292e;">├── LICENSE</span></span>
<span class="line"><span style="color:#24292e;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#24292e;">│ └─ __init__.py</span></span>
<span class="line"><span style="color:#24292e;">├── poetry.lock</span></span>
<span class="line"><span style="color:#24292e;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#24292e;">└── README.md</span></span></code></pre></div><p><code>README.md</code> is the project description file.</p><p><code>pyproject.toml</code> It is the package information file of the project, including the package name, dependencies, author, homepage and other configurations. See <a href="https://python-poetry.org/docs/pyproject/" target="_blank" rel="noreferrer">detailed options</a>.</p><p><code>poetry.lock</code> It is a project dependency lock file that locks the warehouse dependency version so that all collaborators use the same version of dependency. This file needs to be updated using the <code>poetry lock</code> command when updating dependent versions.</p><p><code>llmbot_plugin_bilisearch</code> is the main body of the plugin in the example, and contains the real execution file and resources of the plugin.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because pypi does not allow uploading large files, the plugin packaging folder should not upload large resource files.</p></div><p><code>LICENSE</code> is the open source agreement file of the project and has certain legal effect.</p><h3 id="🔗-prepare" tabindex="-1">🔗 Prepare <a class="header-anchor" href="#🔗-prepare" aria-label="Permalink to &quot;🔗 Prepare&quot;">​</a></h3><p>First make sure you have installed a code editor and Python environment (version greater than 3.9). In the Shell console or CMD command line, enter <code>python -v</code> to check or view the version.</p><h4 id="install-tools" tabindex="-1">Install Tools <a class="header-anchor" href="#install-tools" aria-label="Permalink to &quot;Install Tools&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">llmkira</span></span>
<span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">llmkira</span></span>
<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span></span></code></pre></div><p><code>llmkira</code> It is a packaged collection of robot main files, and the plugin needs to import the classes in it for use. There is an imported <a href="https://github.com/LlmKira/llmbot_plugin_bilisearch/blob/main/llmbot_plugin_bilisearch/__init__.py" target="_blank" rel="noreferrer">example</a>.</p><p><code>poetry</code> is a widely used dependency management and packaging tool. <a href="https://python-poetry.org/docs/basic-usage/" target="_blank" rel="noreferrer">Introduction to basic commands</a>.</p><div class="info custom-block"><p class="custom-block-title">Other</p><ul><li><code>poetry init</code> creates a <code>pyproject.toml</code> file</li><li><code>poetry lock</code> updates dependent locks</li><li><code>poetry add &lt;name&gt;</code> Add dependencies</li><li><code>poetry install</code> installs the current library into the local environment</li><li><code>poetry build</code> build library</li><li><code>poetry publish</code> publishing library</li></ul></div><p>Create a new project on Github and pull it locally.</p><p>Use a code editor to open the local project folder, then create the plugin folder, open a Shell at the current project location and enter <code>poetry init</code> to establish the basic package structure.</p><p>Complete the <code>pyproject.toml</code> file by entering the required information.</p><p>Use the <code>poetry add &lt;some&gt;</code> command or edit the configuration file to add dependencies.</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">python = </span><span style="color:#9ECBFF;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili-api-python = </span><span style="color:#9ECBFF;">&quot;^16.1.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#24292E;">bilibili-api-python = </span><span style="color:#032F62;">&quot;^16.1.0&quot;</span></span></code></pre></div><p>At this point, the basic structure of the project has been established.</p><h2 id="📦-development" tabindex="-1">📦 Development <a class="header-anchor" href="#📦-development" aria-label="Permalink to &quot;📦 Development&quot;">​</a></h2><p>The plugin is internally composed of function classes, tool classes, meta information, functional functions, and parameter verification classes.</p><p>The plugin name within the function must be referenced by the <code>__plugin_name__</code> parameter.</p><h3 id="🪣-add-variables-and-verification" tabindex="-1">🪣 Add variables and verification <a class="header-anchor" href="#🪣-add-variables-and-verification" aria-label="Permalink to &quot;🪣 Add variables and verification&quot;">​</a></h3><p><strong>The following code must be placed at the beginning for verification.</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__openapi_version__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;20231017&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.func_calling </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">verify_openapi_version(__plugin_name__, __openapi_version__) </span><span style="color:#6A737D;"># Verify </span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#24292E;">__openapi_version__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;20231017&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.func_calling </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">verify_openapi_version(__plugin_name__, __openapi_version__) </span><span style="color:#6A737D;"># Verify </span></span></code></pre></div><h3 id="⚙️-define-function" tabindex="-1">⚙️ Define function <a class="header-anchor" href="#⚙️-define-function" aria-label="Permalink to &quot;⚙️ Define function&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bilibili </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">property_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">property_description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Keywords entered in the search box&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">property_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">required</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bilibili </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">property_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">property_description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Keywords entered in the search box&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">property_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">required</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>The information here will be submitted to LLM for use, and you can improve <code>Prompt</code> to improve them.</p><p>The <code>required</code> attribute is not necessarily valid.</p><h3 id="🩼-validation" tabindex="-1">🩼 Validation <a class="header-anchor" href="#🩼-validation" aria-label="Permalink to &quot;🩼 Validation&quot;">​</a></h3><p>In actual situations, even if your function defines the parameter required=True, the return may be None, so we need a parameter validation class to check the parameters.</p><p>With the help of <a href="https://pydantic-docs.helpmanual.io/" target="_blank" rel="noreferrer">pydantic</a>, we can easily got parameter verification.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bili</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">): </span><span style="color:#6A737D;"># Parameters </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     keywords: </span><span style="color:#79B8FF;">str</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">         extra </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;allow&quot;</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bili</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">): </span><span style="color:#6A737D;"># Parameters </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">     keywords: </span><span style="color:#005CC5;">str</span></span>
<span class="line has-focus"><span style="color:#24292E;">     </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Config</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">         extra </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;allow&quot;</span></span></code></pre></div><p>Please use pydantic for parameter verification in the <code>run</code> method of the tool class.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     _set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bili.parse_obj(arg) </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">     _set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bili.parse_obj(arg) </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#D73A49;">except</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">pass</span></span></code></pre></div><h3 id="⚓️-utils" tabindex="-1">⚓️ Utils <a class="header-anchor" href="#⚓️-utils" aria-label="Permalink to &quot;⚓️ Utils&quot;">​</a></h3><p>Write whatever you want.</p><p>The OPENAPI later needs to match an error decorator to count errors.</p><p>Therefore, it is recommended to write a main function to facilitate subsequent upgrades.</p><h3 id="🍭-tools" tabindex="-1">🍭 Tools <a class="header-anchor" href="#🍭-tools" aria-label="Permalink to &quot;🍭 Tools&quot;">​</a></h3><p>All tool classes must inherit <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L14" target="_blank" rel="noreferrer">BaseTool</a>.</p><p>Schema as follows:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> abc </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ABC</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Optional, List, Union, Literal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel, Field</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseTool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ABC</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">     Basic tool class, all tool classes should inherit this class</span></span>
<span class="line"><span style="color:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     silent: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;whether to be silent&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">     function: Function </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># Pass in the function class </span></span>
<span class="line"><span style="color:#E1E4E8;">     keywords: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     pattern: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;regular matching&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     require_auth: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Whether authorization is required&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     repeatable: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Whether it is reusable&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     deploy_child: Literal[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;If it is 0, it ends at this chain point and will not be passed down&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     require_auth_kwargs: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">     env_required: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Environment variable requirements&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     file_match_required: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;re.compile file name regular&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">env_help_docs</span><span style="color:#E1E4E8;">(self, empty_env: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]) -&gt; </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">         Environment variables help documentation</span></span>
<span class="line"><span style="color:#9ECBFF;">         :param empty_env: List of unconfigured environment variables</span></span>
<span class="line"><span style="color:#9ECBFF;">         :return: help documentation/warnings</span></span>
<span class="line"><span style="color:#9ECBFF;">         &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(empty_env, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func_message</span><span style="color:#E1E4E8;">(self, message_text):</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">pass</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#Rule check, if it returns True then candidate it in the request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pre_check</span><span style="color:#E1E4E8;">(self) -&gt; Union[</span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]: </span><span style="color:#6A737D;"># Pre-check, return False if unqualified, True if qualified</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">         String representation {false,reason}</span></span>
<span class="line"><span style="color:#9ECBFF;">         :return: bool | str(error message)</span></span>
<span class="line"><span style="color:#9ECBFF;">         &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task, receiver, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs): </span><span style="color:#6A737D;"># Run the main function </span></span>
<span class="line"><span style="color:#E1E4E8;">         env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kwargs.get(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, {})</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failed</span><span style="color:#E1E4E8;">(self, platform, task, receiver, reason): </span><span style="color:#6A737D;"># If the call fails, you have to call it yourself in run. //[!code++]</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> abc </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ABC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Optional, List, Union, Literal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel, Field</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseTool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ABC</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">     Basic tool class, all tool classes should inherit this class</span></span>
<span class="line"><span style="color:#032F62;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">     silent: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;whether to be silent&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line diff add"><span style="color:#24292E;">     function: Function </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># Pass in the function class </span></span>
<span class="line"><span style="color:#24292E;">     keywords: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     pattern: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;regular matching&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     require_auth: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Whether authorization is required&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     repeatable: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Whether it is reusable&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     deploy_child: Literal[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;If it is 0, it ends at this chain point and will not be passed down&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     require_auth_kwargs: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">     env_required: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Environment variable requirements&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     file_match_required: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;re.compile file name regular&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">env_help_docs</span><span style="color:#24292E;">(self, empty_env: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]) -&gt; </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">         Environment variables help documentation</span></span>
<span class="line"><span style="color:#032F62;">         :param empty_env: List of unconfigured environment variables</span></span>
<span class="line"><span style="color:#032F62;">         :return: help documentation/warnings</span></span>
<span class="line"><span style="color:#032F62;">         &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(empty_env, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func_message</span><span style="color:#24292E;">(self, message_text):</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">pass</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#Rule check, if it returns True then candidate it in the request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pre_check</span><span style="color:#24292E;">(self) -&gt; Union[</span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]: </span><span style="color:#6A737D;"># Pre-check, return False if unqualified, True if qualified</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">         String representation {false,reason}</span></span>
<span class="line"><span style="color:#032F62;">         :return: bool | str(error message)</span></span>
<span class="line"><span style="color:#032F62;">         &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">     </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task, receiver, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs): </span><span style="color:#6A737D;"># Run the main function </span></span>
<span class="line"><span style="color:#24292E;">         env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kwargs.get(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, {})</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(self, platform, task, receiver, reason): </span><span style="color:#6A737D;"># If the call fails, you have to call it yourself in run. //[!code++]</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">pass</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The <code>callback</code> function has no effect at the moment.</p></div><p>Please consider internationalization when constructing keyword parameters, and try to avoid public keywords, and single-word keywords are prohibited.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>After inheriting the <code>BaseTool</code> class, it is forbidden to define <code>__init__</code> again!!</strong></p></div><h4 id="🎳-dynamic-activation-for-func-calling" tabindex="-1">🎳 Dynamic activation for func calling <a class="header-anchor" href="#🎳-dynamic-activation-for-func-calling" aria-label="Permalink to &quot;🎳 Dynamic activation for func calling&quot;">​</a></h4><p>After each conversation is delivered, a new func table will be constructed based on the user corpus. The plugin selector determines which candidate funcs are based on character matches, <code>keywords</code> and <code>pattern</code> The parameters determine whether this conversation is a candidate for this func.</p><p>The <code>func_message</code> func determines whether this func is activated.</p><p>After <code>file_match_required</code> is defined, it will be matched in the file message. If the match is successful, this func will be activated, otherwise it will be disabled!</p><p>The <code>deploy_child</code> parameter determines whether this func continues to pass down (the end marker).</p><p>During each recursion, the last func will be ignored. If you want the func to be reused, you can set <code>repeatable</code> attribute.</p><p>The default chain recursion depth is 6, defined through the <code>limit_child</code> attribute. **The plugin prohibits redefining this parameter. **</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When a new dialogue chain is started, the first node will inherit the func attributes of the previous dialogue chain.</p></div><h4 id="🧃-env-statement-authorization-system" tabindex="-1">🧃 Env statement authorization system <a class="header-anchor" href="#🧃-env-statement-authorization-system" aria-label="Permalink to &quot;🧃 Env statement authorization system&quot;">​</a></h4><ul><li>Statement</li></ul><p>Set the <code>env_required</code> attribute to declare the required constants.</p><ul><li>Setup documentation</li></ul><p>Subclasses override the <code>env_help_docs</code> func to return help documentation. This document is called when a variable is missing and is sent to the user.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task, receiver, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">     env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kwargs.get(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task, receiver, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">     env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kwargs.get(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, {})</span></span></code></pre></div><h3 id="🥄-register-meta-information" tabindex="-1">🥄 Register meta information <a class="header-anchor" href="#🥄-register-meta-information" aria-label="Permalink to &quot;🥄 Register meta information&quot;">​</a></h3><p>Core class <code>PluginMetadata</code> , you can view its composition <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L84" target="_blank" rel="noreferrer">here</a>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># name</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#The middle is the function code...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Core meta information</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_meta__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">openapi_version</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__openapi_version__, </span><span style="color:#6A737D;"># OPENAPI version </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">         FuncPair(</span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bilibili, </span><span style="color:#FFAB70;">tool</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BiliBiliSearch) </span><span style="color:#6A737D;"># Function class and tool class</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># name</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#The middle is the function code...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Core meta information</span></span>
<span class="line"><span style="color:#24292E;">__plugin_meta__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(bilibili)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">     </span><span style="color:#E36209;">openapi_version</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__openapi_version__, </span><span style="color:#6A737D;"># OPENAPI version </span></span>
<span class="line diff add"><span style="color:#24292E;">     </span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line diff add"><span style="color:#24292E;">         FuncPair(</span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bilibili, </span><span style="color:#E36209;">tool</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BiliBiliSearch) </span><span style="color:#6A737D;"># Function class and tool class</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>FuncPair</code> binds <code>function</code> function class and <code>tool</code> tool class.</p></div><p>The <code>openapi_version</code> parameter records the current synchronized version. If the host framework is updated, the Plugin may need to synchronize this parameter to support the new interface.</p><div class="tip custom-block"><p class="custom-block-title">When do I need to update my plugin?</p><p>The OpenAPI component will set which versions of the plugin can be loaded.</p><p>Just wait for issue emails from users....... 😃</p></div><h3 id="🍩-routing-messaging" tabindex="-1">🍩 Routing Messaging <a class="header-anchor" href="#🍩-routing-messaging" aria-label="Permalink to &quot;🍩 Routing Messaging&quot;">​</a></h3><p>We route communication to each platform by defining <code>Meta</code> and <code>Location</code> in the task message. Specific examples are as follows:</p><p>Location can be inherited. Because you don&#39;t know who the other users are.</p><h4 id="📕-router-classmethod" tabindex="-1">📕 Router classmethod <a class="header-anchor" href="#📕-router-classmethod" aria-label="Permalink to &quot;📕 Router classmethod&quot;">​</a></h4><p><code>Meta</code> has the following internally maintained constructors:</p><h5 id="📍reply-notify-notification-reply" tabindex="-1">📍<code>reply_notify</code> notification reply <a class="header-anchor" href="#📍reply-notify-notification-reply" aria-label="Permalink to &quot;📍\`reply_notify\` notification reply&quot;">​</a></h5><p>Notification only, does not write back memory records, and does not trigger any processing.</p><p>Used for error notifications or one-way notifications.</p><p><em>Exp message content</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">An error occurred and you did not configure a constant that the plugin requires.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">An error occurred and you did not configure a constant that the plugin requires.</span></span></code></pre></div><h5 id="📍reply-raw-reply-to-unreadable-content" tabindex="-1">📍<code>reply_raw</code> Reply to unreadable content <a class="header-anchor" href="#📍reply-raw-reply-to-unreadable-content" aria-label="Permalink to &quot;📍\`reply_raw\` Reply to unreadable content&quot;">​</a></h5><p>This message will be written back into the memory record, as the object being queried, and will be processed by LLM as a reply.</p><p><em>Exp message content</em></p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;query content&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;Query result 1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;Query result 2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;Query result 3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;query content&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;Query result 1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;Query result 2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;Query result 3&quot;</span></span>
<span class="line"><span style="color:#24292E;">   ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong><code>reply_raw</code> cannot reply to file messages.</strong></p></div><h5 id="📍reply-message-reply-to-readable-content-file-message" tabindex="-1">📍<code>reply_message</code> Reply to readable content/file message <a class="header-anchor" href="#📍reply-message-reply-to-readable-content-file-message" aria-label="Permalink to &quot;📍\`reply_message\` Reply to readable content/file message&quot;">​</a></h5><p>This message is for execution replies. Reply with human-readable content. Write back the memory record and reply directly.</p><p><em>Exp message content</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">After querying, your Genshin Impact account is: 123456789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">After querying, your Genshin Impact account is: 123456789</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;file message&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;file message&gt;</span></span></code></pre></div><h4 id="📕-or-define-your-own-routing" tabindex="-1">📕 Or Define your own routing <a class="header-anchor" href="#📕-or-define-your-own-routing" aria-label="Permalink to &quot;📕 Or Define your own routing&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line has-focus"><span style="color:#E1E4E8;">_meta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> task.task_meta.child(__plugin_name__) </span><span style="color:#6A737D;"># Custom </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward_reprocess </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TaskHeader.Meta.Callback(</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">role</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Task(</span><span style="color:#FFAB70;">queue</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.platform).send_task(</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#FFAB70;">task</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TaskHeader(</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FFAB70;">sender</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task.sender, </span><span style="color:#6A737D;">#Inherit the sender</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FFAB70;">receiver</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver, </span><span style="color:#6A737D;"># Because there may be forwarding, it can be configured alone</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FFAB70;">task_meta</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_meta,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">             RawMessage(</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#FFAB70;">user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.user_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#FFAB70;">chat_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_search_result</span></span>
<span class="line"><span style="color:#E1E4E8;">             )</span></span>
<span class="line"><span style="color:#E1E4E8;">         ]</span></span>
<span class="line"><span style="color:#E1E4E8;">     )</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line has-focus"><span style="color:#24292E;">_meta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> task.task_meta.child(__plugin_name__) </span><span style="color:#6A737D;"># Custom </span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward_reprocess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TaskHeader.Meta.Callback(</span></span>
<span class="line has-focus"><span style="color:#24292E;">     </span><span style="color:#E36209;">role</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line has-focus"><span style="color:#24292E;">     </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__</span></span>
<span class="line has-focus"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Task(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.platform).send_task(</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">task</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TaskHeader(</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#E36209;">sender</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task.sender, </span><span style="color:#6A737D;">#Inherit the sender</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#E36209;">receiver</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver, </span><span style="color:#6A737D;"># Because there may be forwarding, it can be configured alone</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#E36209;">task_meta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_meta,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">             RawMessage(</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.user_id,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">chat_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_search_result</span></span>
<span class="line"><span style="color:#24292E;">             )</span></span>
<span class="line"><span style="color:#24292E;">         ]</span></span>
<span class="line"><span style="color:#24292E;">     )</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Among them, the <code>task_meta</code> parameter must be cloned from the <code>child</code> function of <code>task_meta</code> passed by the function.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is forbidden to modify the <code>continue_step</code> and <code>limit_child</code> attributes, which will affect the recursion depth.</p></div><h2 id="📩-register-entrypoint-group" tabindex="-1">📩 Register EntryPoint Group <a class="header-anchor" href="#📩-register-entrypoint-group" aria-label="Permalink to &quot;📩 Register EntryPoint Group&quot;">​</a></h2><p>Document reference <a href="https://python-poetry.org/docs/pyproject/#plugins" target="_blank" rel="noreferrer">https://python-poetry.org/docs/pyproject/#plugins</a></p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;llmkira</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">extra</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugin&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># Both front and back must be unique, which will be used when registering hooks.</span></span>
<span class="line"><span style="color:#E1E4E8;">bilisearch = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;llmkira</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">extra</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugin&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># Both front and back must be unique, which will be used when registering hooks.</span></span>
<span class="line"><span style="color:#24292E;">bilisearch = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><p>After the equal sign is the package name of the plugin, and in front is the unique key (please make sure it does not conflict with other plugins)</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">name = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>must register</strong> an EntryPoint to be retrieved by the bot launcher.</p></div><h2 id="🔨-release-package" tabindex="-1">🔨 Release package <a class="header-anchor" href="#🔨-release-package" aria-label="Permalink to &quot;🔨 Release package&quot;">​</a></h2><p><code>poetry publish</code> publishes the package, or uses CI to publish automatically.</p><h3 id="🔧-️package-management-instructions" tabindex="-1">🔧 ️Package management instructions <a class="header-anchor" href="#🔧-️package-management-instructions" aria-label="Permalink to &quot;🔧 ️Package management instructions&quot;">​</a></h3><p>Every time you upgrade, update the <code>version</code> field.</p><h3 id="⚙️-ci-automatic-release" tabindex="-1">⚙️ CI automatic release <a class="header-anchor" href="#⚙️-ci-automatic-release" aria-label="Permalink to &quot;⚙️ CI automatic release&quot;">​</a></h3><p>Write the following content in the <code>.github/workflows/publish.yml</code> file:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">publish</span></span>
<span class="line"><span style="color:#79B8FF;">on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">tags</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">-v*</span></span>
<span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">release</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Publish python package</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#85E89D;">pypi_token</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">publish</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">tags</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">-v*</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">release</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Publish python package</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#22863A;">pypi_token</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre></div><p>Create a new <code>Release</code> in the lower right corner of the main interface of the warehouse, and create a new tag starting with <code>v</code>. Once created, automatic release can be triggered.</p>`,110),p=[o];function t(c,r,i,y,E,d){return a(),n("div",null,p)}const F=s(e,[["render",t]]);export{h as __pageData,F as default};
