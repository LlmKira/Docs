import{_ as s,c as a,o as n,a as e}from"./app.20d1bb53.js";const h=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[{"level":2,"title":"BlipServer Image Understanding Component","slug":"blipserver-image-understanding-component","link":"#blipserver-image-understanding-component","children":[{"level":3,"title":"Edit config.toml","slug":"edit-config-toml","link":"#edit-config-toml","children":[]}]},{"level":2,"title":"MoeGoe Docker component","slug":"moegoe-docker-component","link":"#moegoe-docker-component","children":[]},{"level":2,"title":"Openaibot main body installation","slug":"openaibot-main-body-installation","link":"#openaibot-main-body-installation","children":[{"level":3,"title":"Using Redis standalone","slug":"using-redis-standalone","link":"#using-redis-standalone","children":[]}]}],"relativePath":"en/guide/docker.md","lastUpdated":1678982670000}'),l={name:"en/guide/docker.md"},o=e(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-hidden="true">#</a></h1><p>The live environment for this tutorial is BlipServer MoeGoe Openaibot deployed on different servers.</p><p>First, you need to have <code>docker</code> and <code>docker-compose</code> pre-installed</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span>
<span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/docker/compose/releases/latest/download/docker-compose-</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -s</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -m</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compose</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/dc</span></span>
<span class="line"><span style="color:#FFCB6B;">dc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><h2 id="blipserver-image-understanding-component" tabindex="-1">BlipServer Image Understanding Component <a class="header-anchor" href="#blipserver-image-understanding-component" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/BlipServer</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BlipServer</span></span>
<span class="line"></span></code></pre></div><h3 id="edit-config-toml" tabindex="-1">Edit config.toml <a class="header-anchor" href="#edit-config-toml" aria-hidden="true">#</a></h3><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">device </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cuda</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#or cpu</span></span>
<span class="line"></span></code></pre></div><p>Save and execute the following command</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">dc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>
<span class="line"></span></code></pre></div><h2 id="moegoe-docker-component" tabindex="-1">MoeGoe Docker component <a class="header-anchor" href="#moegoe-docker-component" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/MoeGoe</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MoeGoe</span></span>
<span class="line"></span></code></pre></div><p>Then put the model under model (download it yourself) like this</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">model</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- somemodel.pth</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- somemodel.pth.json ( == config.json)</span></span>
<span class="line"><span style="color:#A6ACCD;">|---- info.json</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="openaibot-main-body-installation" tabindex="-1">Openaibot main body installation <a class="header-anchor" href="#openaibot-main-body-installation" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/aiastia-dockerhub/Openaibot.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Openaibot</span></span>
<span class="line"></span></code></pre></div><ul><li>Configuration</li></ul><p>Follow the tutorial to complete the configuration under Config.</p><ul><li>Build</li></ul><p>If BlipServer and Openaibot are not deployed on the same server.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml.bak</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span></span>
<span class="line"></span></code></pre></div><p>If BlipServer and Openaibot are deployed on the same server.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nano</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose.yml</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ctrl + _ :28 </span></span>
<span class="line"></span></code></pre></div><p>Modify the absolute path to the BlipServer file location on line L28 of docker-compose.yml. Also the BlipServer step * <em>not needed</em>* <code>dc up -v</code> Just stop that docker if it is executed.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/ubuntu/BlipServer/:/app</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>dc up -d</code>, done.</p><h3 id="using-redis-standalone" tabindex="-1">Using Redis standalone <a class="header-anchor" href="#using-redis-standalone" aria-hidden="true">#</a></h3><p>If you want to use the <code>redis</code> data server standalone, you can delete the <code>docker-compose.yml.bak</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis</span></span>
<span class="line"></span></code></pre></div><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">redis</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis:latest</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">. /redis:/data</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">6379:6379</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BlipServer</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app-tier</span></span>
<span class="line"></span></code></pre></div>`,30),p=[o];function t(c,r,i,d,C,y){return n(),a("div",null,p)}const A=s(l,[["render",t]]);export{h as __pageData,A as default};
