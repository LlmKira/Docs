import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b81f03d3.js";const F=JSON.parse('{"title":"📝 插件开发指南","description":"","frontmatter":{},"headers":[],"relativePath":"dev/basic.md","filePath":"dev/basic.md","lastUpdated":1698582654000}'),p={name:"dev/basic.md"},o=l(`<h1 id="📝-插件开发指南" tabindex="-1">📝 插件开发指南 <a class="header-anchor" href="#📝-插件开发指南" aria-label="Permalink to &quot;📝 插件开发指南&quot;">​</a></h1><p>本文所用示例插件库: <a href="https://github.com/LlmKira/llmbot_plugin_bilisearch" target="_blank" rel="noreferrer">https://github.com/LlmKira/llmbot_plugin_bilisearch</a></p><p>OpenaiBot 为第三方插件提供了 OPENAPI 接口注册系统，本文将介绍如何建造一个插件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>因为插件机制是参考 <code>Nonebot</code> 实现，故插件开发和 NoneBot Plugin 近似。</p></div><h2 id="📌-结构规范" tabindex="-1">📌 结构规范 <a class="header-anchor" href="#📌-结构规范" aria-label="Permalink to &quot;📌 结构规范&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">基础结构示例</span></span>
<span class="line"><span style="color:#e1e4e8;">├── LICENSE</span></span>
<span class="line"><span style="color:#e1e4e8;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#e1e4e8;">│       └─ __init__.py</span></span>
<span class="line"><span style="color:#e1e4e8;">├── poetry.lock</span></span>
<span class="line"><span style="color:#e1e4e8;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#e1e4e8;">└── README.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">基础结构示例</span></span>
<span class="line"><span style="color:#24292e;">├── LICENSE</span></span>
<span class="line"><span style="color:#24292e;">├── llmbot_plugin_bilisearch</span></span>
<span class="line"><span style="color:#24292e;">│       └─ __init__.py</span></span>
<span class="line"><span style="color:#24292e;">├── poetry.lock</span></span>
<span class="line"><span style="color:#24292e;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#24292e;">└── README.md</span></span></code></pre></div><p><code>README.md</code> 是项目的说明文件。</p><p><code>pyproject.toml</code> 是项目的包信息文件，包含包的名称，依赖,和作者，主页等配置。查看<a href="https://python-poetry.org/docs/pyproject/" target="_blank" rel="noreferrer">详细选项</a>。</p><p><code>poetry.lock</code> 是项目依赖锁文件，锁定仓库依赖版本，让所有协作者都使用统一版本依赖。此文件在更新依赖版本时候，需要使用 <code>poetry lock</code> 命令更新。</p><p><code>llmbot_plugin_bilisearch</code> 是示例中插件的主体，内含插件的真正执行文件和资源。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>因为 pypi 不允许上传大文件，故插件打包文件夹不应上传较大资源文件。</p></div><p><code>LICENSE</code> 是项目的开源协议文件，具有一定法律效力。选择协议可以参考 <a href="https://www.zhihu.com/question/19568896" target="_blank" rel="noreferrer">知乎问题</a>。</p><h3 id="🔗-导入验证" tabindex="-1">🔗 导入验证 <a class="header-anchor" href="#🔗-导入验证" aria-label="Permalink to &quot;🔗 导入验证&quot;">​</a></h3><p>首先确认您安装了一个代码编辑器，Python 环境(版本大于3.9)。在 Shell控制台 或 CMD命令行 输入 <code>python -v</code> 检查或查看版本。</p><h4 id="下载所需的工具" tabindex="-1">下载所需的工具 <a class="header-anchor" href="#下载所需的工具" aria-label="Permalink to &quot;下载所需的工具&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">llmkira</span></span>
<span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">llmkira</span></span>
<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span></span></code></pre></div><p><code>llmkira</code> 是机器人主体文件的打包集合，插件需要导入其中的类进行使用。这里有导入的<a href="https://github.com/LlmKira/llmbot_plugin_bilisearch/blob/main/llmbot_plugin_bilisearch/__init__.py" target="_blank" rel="noreferrer">示例</a>。</p><p><code>poetry</code> 是一个广泛使用的依赖管理和打包的工具。<a href="https://python-poetry.org/docs/basic-usage/" target="_blank" rel="noreferrer">基础命令介绍</a>。</p><div class="info custom-block"><p class="custom-block-title">常用命令</p><ul><li><code>poetry init</code> 创建一个 <code>pyproject.toml</code> 文件</li><li><code>poetry lock</code> 更新依赖锁</li><li><code>poetry add &lt;name&gt;</code> 添加依赖</li><li><code>poetry install</code> 安装当前库到本地环境</li><li><code>poetry build</code> 构建库</li><li><code>poetry publish</code> 发布库</li></ul></div><p>在 Github 新建项目并拉取本地。</p><p>用代码编辑器打开本地项目文件夹，再建立插件文件夹，在当前项目位置打开 Shell 输入 <code>poetry init</code> 建立基础包结构。</p><p>输入所需信息完善 <code>pyproject.toml</code> 文件。</p><p>使用 <code>poetry add &lt;some&gt;</code> 命令或者编辑配置文件添加依赖。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">python = </span><span style="color:#9ECBFF;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili-api-python = </span><span style="color:#9ECBFF;">&quot;^16.1.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;^3.9&quot;</span></span>
<span class="line"><span style="color:#24292E;">bilibili-api-python = </span><span style="color:#032F62;">&quot;^16.1.0&quot;</span></span></code></pre></div><p>至此，项目基本结构已经建立。</p><h2 id="📦-开发流程" tabindex="-1">📦 开发流程 <a class="header-anchor" href="#📦-开发流程" aria-label="Permalink to &quot;📦 开发流程&quot;">​</a></h2><p>插件内部由 函数类，工具类，元信息，功能函数，参数校验类 组成。</p><p>函数内插件名称<strong>必须</strong>由 <code>__plugin_name__</code> 参数引用。</p><h3 id="🪣-添加变量与验证" tabindex="-1">🪣 添加变量与验证 <a class="header-anchor" href="#🪣-添加变量与验证" aria-label="Permalink to &quot;🪣 添加变量与验证&quot;">​</a></h3><p><strong>下面的代码必须放进开头进行架构版本验证。</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__package_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">__openapi_version__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;20231017&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.func_calling </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">verify_openapi_version(__package_name__, __openapi_version__)  </span><span style="color:#6A737D;"># 验证 </span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">__package_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"><span style="color:#24292E;">__openapi_version__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;20231017&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.func_calling </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> verify_openapi_version</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">verify_openapi_version(__package_name__, __openapi_version__)  </span><span style="color:#6A737D;"># 验证 </span></span></code></pre></div><h3 id="⚙️-定义函数类" tabindex="-1">⚙️ 定义函数类 <a class="header-anchor" href="#⚙️-定义函数类" aria-label="Permalink to &quot;⚙️ 定义函数类&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.sdk.endpoint.openai </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">bilibili </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(哔哩哔哩)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Function.FunctionExtra(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#FFAB70;">system_prompt</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;"># 如果装载到了/系统提示</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    )</span></span>
<span class="line"><span style="color:#E1E4E8;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Keywords entered in the search box&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">property_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">required</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.sdk.endpoint.openai </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bilibili </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(哔哩哔哩)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">config</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Function.FunctionExtra(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">system_prompt</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;"># 如果装载到了/系统提示</span></span>
<span class="line"><span style="color:#24292E;">                    ),</span></span>
<span class="line"><span style="color:#24292E;">                    )</span></span>
<span class="line"><span style="color:#24292E;">bilibili.add_property(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Keywords entered in the search box&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">property_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">required</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>这里的信息会被提交给LLM使用，你可以运用 <code>Prompt 工程</code> 来改进他们。</p><p><code>required</code> 属性不一定有效。</p><h3 id="🩼-添加函数校验类" tabindex="-1">🩼 添加函数校验类 <a class="header-anchor" href="#🩼-添加函数校验类" aria-label="Permalink to &quot;🩼 添加函数校验类&quot;">​</a></h3><p>在实际情况中，即使您的函数定义了参数 required=True，但是返回也可能是 None，故我们需要一个参数校验类来检查参数。</p><p>借助于 <a href="https://pydantic-docs.helpmanual.io/" target="_blank" rel="noreferrer">pydantic</a> ，我们可以很方便的实现参数校验。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bili</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):  </span><span style="color:#6A737D;"># 参数 </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    keywords: </span><span style="color:#79B8FF;">str</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    extra </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;allow&quot;</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bili</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):  </span><span style="color:#6A737D;"># 参数 </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">    keywords: </span><span style="color:#005CC5;">str</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Config</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    extra </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;allow&quot;</span></span></code></pre></div><p>请您在 工具类 的 <code>run</code> 方法中使用 pydantic 做参数校验。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    _set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bili.parse_obj(arg)  </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;">:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">    _set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bili.parse_obj(arg)  </span><span style="color:#6A737D;"># </span></span>
<span class="line has-focus"><span style="color:#D73A49;">except</span><span style="color:#24292E;">:</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># failed</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><h3 id="⚓️-功能函数" tabindex="-1">⚓️ 功能函数 <a class="header-anchor" href="#⚓️-功能函数" aria-label="Permalink to &quot;⚓️ 功能函数&quot;">​</a></h3><p>功能函数就是一个实现功能的函数。随便你怎么写。</p><p>此函数自由发挥，但是之后的OPENAPI架构需要匹配一个错误装饰器来计数错误。</p><p>故推荐编写一个主函数便于后续升级。</p><h3 id="🍭-工具类" tabindex="-1">🍭 工具类 <a class="header-anchor" href="#🍭-工具类" aria-label="Permalink to &quot;🍭 工具类&quot;">​</a></h3><p>所有工具类必须继承 <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L14" target="_blank" rel="noreferrer">BaseTool</a>。</p><p>具体写法见下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> abc </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ABC</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Optional, List, Union, Literal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel, Field</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseTool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ABC</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    基础工具类，所有工具类都应该继承此类</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    silent: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;是否静默&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    function: Function </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;功能&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 函数类传入 </span></span>
<span class="line"><span style="color:#E1E4E8;">    keywords: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;关键词&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    pattern: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;正则匹配&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    require_auth: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;是否需要授权&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    repeatable: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;是否可重复使用&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    deploy_child: Literal[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;如果为0，终结于此链点，不再向下传递&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    require_auth_kwargs: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    env_required: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field([], </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;环境变量要求&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_match_required: Optional[re.Pattern] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Field(</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;re.compile 文件名正则&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">env_help_docs</span><span style="color:#E1E4E8;">(self, empty_env: List[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]) -&gt; </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        环境变量帮助文档</span></span>
<span class="line"><span style="color:#9ECBFF;">        :param empty_env: 未被配置的环境变量列表</span></span>
<span class="line"><span style="color:#9ECBFF;">        :return: 帮助文档/警告</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(empty_env, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func_message</span><span style="color:#E1E4E8;">(self, message_text):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 规则检查，如果返回True则在请求中候选它</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pre_check</span><span style="color:#E1E4E8;">(self) -&gt; Union[</span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">]:  </span><span style="color:#6A737D;"># 预检查，如果不合格则返回False，合格则返回True</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        字符串表示 {false,reason}</span></span>
<span class="line"><span style="color:#9ECBFF;">        :return: bool | str(error message)</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task, receiver, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):  </span><span style="color:#6A737D;"># 运行主函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kwargs.get(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, {})</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failed</span><span style="color:#E1E4E8;">(self, platform, task, receiver, reason):  </span><span style="color:#6A737D;"># 失败调用，要自己在 run 里面调用哦。 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> abc </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ABC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Optional, List, Union, Literal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel, Field</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseTool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ABC</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    基础工具类，所有工具类都应该继承此类</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    silent: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;是否静默&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line diff add"><span style="color:#24292E;">    function: Function </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;功能&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 函数类传入 </span></span>
<span class="line"><span style="color:#24292E;">    keywords: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;关键词&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    pattern: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;正则匹配&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    require_auth: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;是否需要授权&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    repeatable: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;是否可重复使用&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    deploy_child: Literal[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;如果为0，终结于此链点，不再向下传递&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    require_auth_kwargs: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    env_required: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field([], </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;环境变量要求&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    file_match_required: Optional[re.Pattern] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Field(</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;re.compile 文件名正则&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">env_help_docs</span><span style="color:#24292E;">(self, empty_env: List[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]) -&gt; </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        环境变量帮助文档</span></span>
<span class="line"><span style="color:#032F62;">        :param empty_env: 未被配置的环境变量列表</span></span>
<span class="line"><span style="color:#032F62;">        :return: 帮助文档/警告</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(empty_env, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;empty_env must be list&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;You need to configure ENV to start use this tool&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func_message</span><span style="color:#24292E;">(self, message_text):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 规则检查，如果返回True则在请求中候选它</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pre_check</span><span style="color:#24292E;">(self) -&gt; Union[</span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">]:  </span><span style="color:#6A737D;"># 预检查，如果不合格则返回False，合格则返回True</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        字符串表示 {false,reason}</span></span>
<span class="line"><span style="color:#032F62;">        :return: bool | str(error message)</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task, receiver, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):  </span><span style="color:#6A737D;"># 运行主函数 </span></span>
<span class="line"><span style="color:#24292E;">        env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kwargs.get(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, {})</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(self, platform, task, receiver, reason):  </span><span style="color:#6A737D;"># 失败调用，要自己在 run 里面调用哦。 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>callback</code> 函数暂时没有任何作用。</p></div><p>构建关键词参数时请考虑国际化，且尽量避开公共关键词，禁止使用单字关键词。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>继承 <code>BaseTool</code> 类后，<strong>禁止定义 <code>__init__</code></strong></p></div><h4 id="🎳-动态激活" tabindex="-1">🎳 动态激活 <a class="header-anchor" href="#🎳-动态激活" aria-label="Permalink to &quot;🎳 动态激活&quot;">​</a></h4><p>每次对话送达后，会重新根据用户语料构建新的函数表。 插件选择器会根据字符匹配确定哪些是候选函数， <code>keywords</code> 和 <code>pattern</code> 参数决定了此次对话是否候选此函数。</p><p><code>func_message</code> 函数决定了是否激活此函数。</p><p><code>file_match_required</code> 被定义后，会在文件消息中进行匹配，匹配成功则激活此函数，否则禁用！</p><p><code>deploy_child</code> 参数决定了此函数是否继续向下传递（结束标记）。</p><p>每次递归，上次的函数会被忽略，如果希望函数可以重复使用，可以设置 <code>repeatable</code> 属性。</p><p>默认链递归深度为 6，通过 <code>limit_child</code> 属性定义。<strong>插件禁止重新定义此参数。</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>新对话链被启动时，会在第一个节点继承上一个对话链的函数属性。</p></div><h4 id="🧃-env-声明授权系统" tabindex="-1">🧃 Env 声明授权系统 <a class="header-anchor" href="#🧃-env-声明授权系统" aria-label="Permalink to &quot;🧃 Env 声明授权系统&quot;">​</a></h4><ul><li>声明</li></ul><p>设置 <code>env_required</code> 属性，声明需要的常量。</p><ul><li>设置文档</li></ul><p>子类重写 <code>env_help_docs</code> 函数，返回帮助文档。此文档会在缺失变量时调用，被发送给用户。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task, receiver, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kwargs.get(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task, receiver, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kwargs.get(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, {})</span></span></code></pre></div><h3 id="🥄-注册元信息" tabindex="-1">🥄 注册元信息 <a class="header-anchor" href="#🥄-注册元信息" aria-label="Permalink to &quot;🥄 注册元信息&quot;">​</a></h3><p>核心类 <code>PluginMetadata</code> ，您可以在 <a href="https://github.com/LlmKira/Openaibot/blob/main/llmkira/sdk/func_calling/schema.py#L84" target="_blank" rel="noreferrer">这里</a> 查看它的组成结构。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 中间是函数代码......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 核心元信息</span></span>
<span class="line"><span style="color:#E1E4E8;">__plugin_meta__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Search videos on bilibili.com(哔哩哔哩)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">openapi_version</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__openapi_version__,  </span><span style="color:#6A737D;"># OPENAPI 版本 </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        FuncPair(</span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bilibili, </span><span style="color:#FFAB70;">tool</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BiliBiliSearch)  </span><span style="color:#6A737D;"># 函数类和工具类</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 名称</span></span>
<span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;search_in_bilibili&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 中间是函数代码......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 核心元信息</span></span>
<span class="line"><span style="color:#24292E;">__plugin_meta__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PluginMetadata(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Search videos on bilibili.com(哔哩哔哩)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;search &lt;keywords&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#E36209;">openapi_version</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__openapi_version__,  </span><span style="color:#6A737D;"># OPENAPI 版本 </span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line diff add"><span style="color:#24292E;">        FuncPair(</span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bilibili, </span><span style="color:#E36209;">tool</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BiliBiliSearch)  </span><span style="color:#6A737D;"># 函数类和工具类</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>FuncPair</code> 绑定 <code>function</code> 函数类和 <code>tool</code> 工具类。</p></div><p><code>openapi_version</code> 参数记录当前同步版本，如果宿主框架更新，Plugin 可能需要同步此参数以支持新接口。</p><div class="tip custom-block"><p class="custom-block-title">什么时候需要更新我的插件？</p><p>OpenAPI 组件会设定哪些版本的插件可以被加载，如果您的插件版本过低，会报错，届时您将收到用户的 Issue。</p></div><h3 id="🥥-前验触发器" tabindex="-1">🥥 前验触发器 <a class="header-anchor" href="#🥥-前验触发器" aria-label="Permalink to &quot;🥥 前验触发器&quot;">​</a></h3><p>使用这个装饰器来阻止或通过特定符合条件的响应。 用于敏感词过滤，特殊语段无命令主动响应，动态配置响应扳机，拒绝某些用户回答等场景。</p><div class="language-jupyterpython vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jupyterpython</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@resign_trigger(Trigger(on_platform=&quot;telegram&quot;, action=&quot;deny&quot;, priority=0))</span></span>
<span class="line"><span style="color:#e1e4e8;">async def on_chat_message(message: str, uid: str, **kwargs):</span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    :param message: RawMessage</span></span>
<span class="line"><span style="color:#e1e4e8;">    :return:</span></span>
<span class="line"><span style="color:#e1e4e8;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    if &quot;&lt;hello&gt;&quot; in message:</span></span>
<span class="line"><span style="color:#e1e4e8;">        return True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@resign_trigger(Trigger(on_platform=&quot;telegram&quot;, action=&quot;deny&quot;, priority=0))</span></span>
<span class="line"><span style="color:#24292e;">async def on_chat_message(message: str, uid: str, **kwargs):</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">    :param message: RawMessage</span></span>
<span class="line"><span style="color:#24292e;">    :return:</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">    if &quot;&lt;hello&gt;&quot; in message:</span></span>
<span class="line"><span style="color:#24292e;">        return True</span></span></code></pre></div><p>函数返回 <code>True</code> 则说明需要前置动作。</p><h3 id="🔨-错误禁用" tabindex="-1">🔨 错误禁用 <a class="header-anchor" href="#🔨-错误禁用" aria-label="Permalink to &quot;🔨 错误禁用&quot;">​</a></h3><p>使用这个装饰器来监测行动函数的错误。错误次数被记录过多后，此函数插件就不被调用了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@resign_plugin_executor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">function</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">search)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search_in_bilibili</span><span style="color:#E1E4E8;">(arg: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@resign_plugin_executor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">function</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">search)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search_in_bilibili</span><span style="color:#24292E;">(arg: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>注意这是一个同步装饰器，如果您的函数是异步的，可以调用 utils.sync。</p><blockquote><p>TODO 将错误作为日志警戒到该去的地方。</p></blockquote><h3 id="🍩-路由通信" tabindex="-1">🍩 路由通信 <a class="header-anchor" href="#🍩-路由通信" aria-label="Permalink to &quot;🍩 路由通信&quot;">​</a></h3><p>我们通过定义任务消息中的 <code>Meta</code> 和 <code>Location</code> 向各个平台路由通信。具体例子如下：</p><p>Location 继承过来即可。因为你不知道其他用户是谁。</p><h4 id="📕-通信模式" tabindex="-1">📕 通信模式 <a class="header-anchor" href="#📕-通信模式" aria-label="Permalink to &quot;📕 通信模式&quot;">​</a></h4><p><code>Meta</code> 有如下内部维护的构造函数：</p><h5 id="📍reply-notify-通知回复" tabindex="-1">📍<code>reply_notify</code> 通知回复 <a class="header-anchor" href="#📍reply-notify-通知回复" aria-label="Permalink to &quot;📍\`reply_notify\` 通知回复&quot;">​</a></h5><p>仅仅通知，不回写记忆记录，也不触发任何处理。</p><p>用于错误通知或单向通知。</p><p><em>适用消息内容举例</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">发生了错误，您没有配置插件需要的常量。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">发生了错误，您没有配置插件需要的常量。</span></span></code></pre></div><h5 id="📍reply-raw-回复不可读内容" tabindex="-1">📍<code>reply_raw</code> 回复不可读内容 <a class="header-anchor" href="#📍reply-raw-回复不可读内容" aria-label="Permalink to &quot;📍\`reply_raw\` 回复不可读内容&quot;">​</a></h5><p>此消息会被回写进记忆记录，作为被查询的对象，由LLM处理后代为答复。比如搜索，数据集查询结果。</p><p><em>适用消息内容举例</em></p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;查询内容&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;查询结果1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;查询结果2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;查询结果3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;查询内容&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;查询结果1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;查询结果2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;查询结果3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong><code>reply_raw</code> 不能回复文件消息。</strong></p></div><h5 id="📍reply-message-回复可读内容-文件消息" tabindex="-1">📍<code>reply_message</code> 回复可读内容/文件消息 <a class="header-anchor" href="#📍reply-message-回复可读内容-文件消息" aria-label="Permalink to &quot;📍\`reply_message\` 回复可读内容/文件消息&quot;">​</a></h5><p>此消息适用于执行回复。回复人类可读的内容。回写记忆记录，直接回复。</p><p><em>适用消息内容举例</em></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">查询完毕，您的原神账号为：123456789</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">查询完毕，您的原神账号为：123456789</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">文件消息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">文件消息</span></span></code></pre></div><h4 id="📕-自定义通信模式" tabindex="-1">📕 自定义通信模式 <a class="header-anchor" href="#📕-自定义通信模式" aria-label="Permalink to &quot;📕 自定义通信模式&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__plugin_name__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">task </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">receiver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">_search_result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> llmkira.some.pack </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Task, TaskHeader, RawMessage</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> task.task_meta.child(__plugin_name__)  </span><span style="color:#6A737D;"># 自定义 </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback_forward_reprocess </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.direct_reply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.write_back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.release_chain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">_meta.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TaskHeader.Meta.Callback(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">role</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">__plugin_name__</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Task(</span><span style="color:#FFAB70;">queue</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.platform).send_task(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">task</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TaskHeader(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">sender</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task.sender,  </span><span style="color:#6A737D;"># 继承发送者</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">receiver</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver,  </span><span style="color:#6A737D;"># 因为可能有转发，所以可以单配</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">task_meta</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_meta,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">                RawMessage(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.user_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">chat_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_search_result</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">__plugin_name__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">receiver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">_search_result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> llmkira.some.pack </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Task, TaskHeader, RawMessage</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#24292E;">_meta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> task.task_meta.child(__plugin_name__)  </span><span style="color:#6A737D;"># 自定义 </span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback_forward_reprocess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.direct_reply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.write_back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.release_chain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line has-focus"><span style="color:#24292E;">_meta.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TaskHeader.Meta.Callback(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">role</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">__plugin_name__</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Task(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.platform).send_task(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">task</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TaskHeader(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">sender</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task.sender,  </span><span style="color:#6A737D;"># 继承发送者</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">receiver</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver,  </span><span style="color:#6A737D;"># 因为可能有转发，所以可以单配</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">task_meta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_meta,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">                RawMessage(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.user_id,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">chat_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">receiver.chat_id,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_search_result</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><p>其中，<code>task_meta</code> 参数必须由函数传递的 <code>task_meta</code> 的 <code>child</code> 函数克隆过来。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>禁止修改 <code>continue_step</code> 和 <code>limit_child</code> 属性，影响递归深度。</p></div><h2 id="🎃-在插件中访问-创建文件" tabindex="-1">🎃 在插件中访问/创建文件 <a class="header-anchor" href="#🎃-在插件中访问-创建文件" aria-label="Permalink to &quot;🎃 在插件中访问/创建文件&quot;">​</a></h2><p>Redis 上传下载依赖一个短文件 ID。</p><p>参考以下处理</p><h3 id="📥-下载文件" tabindex="-1">📥 下载文件 <a class="header-anchor" href="#📥-下载文件" aria-label="Permalink to &quot;📥 下载文件&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self, task: TaskHeader, receiver: TaskHeader.Location, arg, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    处理message，返回message</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    _translate_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> task.message:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item.file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.file:</span></span>
<span class="line"><span style="color:#E1E4E8;">                _translate_file.append(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">    _file_obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> RawMessage.download_file(</span><span style="color:#FFAB70;">file_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">i.file_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sorted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(_translate_file), </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">_translate_file.index)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    _file_obj: List[File.Data] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [item </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> _file_obj </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self, task: TaskHeader, receiver: TaskHeader.Location, arg, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    处理message，返回message</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    _translate_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> task.message:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item.file:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.file:</span></span>
<span class="line"><span style="color:#24292E;">                _translate_file.append(i)</span></span>
<span class="line"><span style="color:#24292E;">    _file_obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> RawMessage.download_file(</span><span style="color:#E36209;">file_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">i.file_id)</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sorted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(_translate_file), </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">_translate_file.index)]</span></span>
<span class="line"><span style="color:#24292E;">    _file_obj: List[File.Data] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [item </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> _file_obj </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item]</span></span></code></pre></div><h3 id="📤-上传文件" tabindex="-1">📤 上传文件 <a class="header-anchor" href="#📤-上传文件" aria-label="Permalink to &quot;📤 上传文件&quot;">​</a></h3><div class="language-jupyterpython vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jupyterpython</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">file_obj = await RawMessage.upload_file(name=&quot;test.png&quot;, data=translated_file.getvalue())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">file_obj = await RawMessage.upload_file(name=&quot;test.png&quot;, data=translated_file.getvalue())</span></span></code></pre></div><h2 id="📩-注册-entrypoint-group" tabindex="-1">📩 注册 EntryPoint Group <a class="header-anchor" href="#📩-注册-entrypoint-group" aria-label="Permalink to &quot;📩 注册 EntryPoint Group&quot;">​</a></h2><p>文档参考 <a href="https://python-poetry.org/docs/pyproject/#plugins" target="_blank" rel="noreferrer">https://python-poetry.org/docs/pyproject/#plugins</a></p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;llmkira</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">extra</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">plugin&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># 前面和后面都要唯一，注册钩子的时候会用到</span></span>
<span class="line"><span style="color:#E1E4E8;">bilisearch = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;llmkira</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">extra</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">plugin&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># The entrypoint name is the name of the plugin.</span></span>
<span class="line"><span style="color:#6A737D;"># 前面和后面都要唯一，注册钩子的时候会用到</span></span>
<span class="line"><span style="color:#24292E;">bilisearch = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><p>等号的后面是插件的包名，前面是唯一键（请确保不会与其他插件冲突）</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">name = </span><span style="color:#9ECBFF;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;llmbot_plugin_bilisearch&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>你<strong>必须注册</strong> EntryPoint 才能被机器人启动程序检索到。</p></div><h2 id="🔨-发布包" tabindex="-1">🔨 发布包 <a class="header-anchor" href="#🔨-发布包" aria-label="Permalink to &quot;🔨 发布包&quot;">​</a></h2><p><code>poetry publish</code> 发布包，或者使用 CI 自动发布。</p><h3 id="🔧-️包管理说明" tabindex="-1">🔧 ️包管理说明 <a class="header-anchor" href="#🔧-️包管理说明" aria-label="Permalink to &quot;🔧 ️包管理说明&quot;">​</a></h3><p>每次升级时，都要更新 <code>version</code> 字段。</p><h3 id="⚙️-ci自动发布" tabindex="-1">⚙️ CI自动发布 <a class="header-anchor" href="#⚙️-ci自动发布" aria-label="Permalink to &quot;⚙️ CI自动发布&quot;">​</a></h3><p>在 <code>.github/workflows/publish.yml</code> 文件中写入如下内容：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">publish</span></span>
<span class="line"><span style="color:#79B8FF;">on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">tags</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">v*</span></span>
<span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">release</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Publish python package</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">with</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">pypi_token</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">publish</span></span>
<span class="line"><span style="color:#005CC5;">on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">tags</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">v*</span></span>
<span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">release</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v3</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Publish python package</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">JRubics/poetry-publish@v1.16</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">with</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">pypi_token</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${{ secrets.PYPI_TOKEN }}</span></span></code></pre></div><p>仓库主界面右下角新建 <code>Release</code>, 新建 <code>v</code> 开头的标签，创建后即可触发自动发布。</p>`,126),e=[o];function t(c,r,y,i,E,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
